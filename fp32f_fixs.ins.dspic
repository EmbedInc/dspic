;   ***************************************************************
;   * Copyright (C) 2012, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
/if [not [exist "fp32f_fixs_ins"]] then
  /const fp32f_fixs_ins bool = true

.section .code_fp32f_fixs, code
;*******************************************************************************
;
;   Subroutine FP32F_FIXS
;
;   Convert the floating point value in W1:W0 to fixed point with W2 fraction
;   bits.  W2 may be negative to indicate there will be additional 0 integer
;   bits to the right of the resulting value.  The result will be signed in
;   W1:W0.
;
         glbsub  fp32f_fixs, regf3 | regf4

         ior     w1, w0, w3
         bra     z, fixs_0   ;zero special case ?

         mov     w1, w3      ;get just the exponent field into W3
         bclr    w3, #15
         mov     #16384, w4
         sub     w3, w4, w3  ;make signed exponent from FP number
         add     w3, w2, w3  ;make exponent to apply in W3
         sub     #16, w3     ;make left shift amount based on exponent
         btsc    w3, #15     ;shifting left or staying put ?
         jump    fixs_right  ;shifting right
;
;   Shift the mantissa left by W3 bits.  W3 is positive or 0.  W0 contains the
;   raw mantissa field of the FP number.
;
         btsc    w1, #15     ;FP number is positive ?
         jump    fixs_negl   ;FP number is negative
         ;
         ;   Shift positive number left.
         ;
         cp      w3, #14
         bra     gtu, fixs_max ;shift would overflow, return max

         mov     #1, w1      ;init high word with implied 1 of the mantissa

         sl      w1, w3, w1  ;shift the high word
         sl      w0, w3, w4  ;make final low word in W4
         subr    w3, #16, w3 ;bits to shift low word right for high word part
         lsr     w0, w3, w0  ;make low contribution to high word
         ior     w1, w0, w1  ;assemble final high word
         mov     w4, w0      ;get final low word
         jump    fixs_leave
         ;
         ;   Shift negative number left.
         ;
fixs_negl:
         cp      w3, #14
         bra     gtu, fixs_min ;shift would overflow, return min

         mov     #0xFFFE, w1 ;init high word with complement of implied 1
         subr    w0, #0, w0  ;complement and increment low word
         addc    w1, #0, w1  ;propagate carry to high word

         sl      w1, w3, w1  ;shift the high word
         sl      w0, w3, w4  ;make final low word in W4
         subr    w3, #16, w3 ;bits to shift low word right for high word part
         lsr     w0, w3, w0  ;make low contribution to high word
         ior     w1, w0, w1  ;assemble final high word
         mov     w4, w0      ;get final low word
         jump    fixs_leave
;
;   Shift the mantissa right by -W3 bits.  W3 is negative.  W0 contains the raw
;   mantissa field of the FP number.
;
fixs_right:
         btsc    w1, #15     ;FP number is positive ?
         jump    fixs_negr   ;FP number is negative
         ;
         ;   Shift positive number right.
         ;
         subr    w3, #0, w3  ;make number of bits to shift right
         cp      w3, #16
         bra     gtu, fixs_0 ;shift would leave only fixed bits ?

         lsr     w0, w3, w0  ;shift bits from raw mantissa field into place
         sub     #1, w3
         mov     #0x8000, w1
         lsr     w1, w3, w1  ;get implied 1 bit into correct position
         ior     w0, w1, w0  ;assemble low word of result
         mov     #0, w1      ;high word of result is always 0 on right shift
         jump    fixs_leave
         ;
         ;   Shift negative number right.
         ;
fixs_negr:
         subr    w3, #0, w3  ;make number of bits to shift right
         cp      w3, #16
         bra     gtu, fixs_0 ;shift would leave only fixed bits ?

         mov     #0xFFFE, w1 ;init high word with complement of implied 1
         subr    w0, #0, w0  ;complement and increment low word
         addc    w1, #0, w1  ;propagate carry to high word

         lsr     w0, w3, w0  ;shift bits from raw mantissa field into place
         subr    w3, #16, w3
         sl      w1, w3, w1  ;get contribution from high word into place
         ior     w0, w1, w0  ;assemble low word of result
         mov     #0xFFFF, w1 ;high word value is fixed on right shift

fixs_leave:                  ;common exit point
         leaverest

fixs_0:                      ;return zero
         mov     #0, w1
         mov     #0, w0
         jump    fixs_leave

fixs_max:                    ;return maximum possible signed value
         mov     #0x7FFF, w1
         mov     #0xFFFF, w0
         jump    fixs_leave

fixs_min:                    ;return min possible signed value
         mov     #0x8000, w1
         mov     #0, w0
         jump    fixs_leave

  /endif
