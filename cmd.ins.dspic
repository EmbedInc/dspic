;   ***************************************************************
;   * Copyright (C) 2010, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Command stream processor.  The module contains the mechanics for processing
;   and responding to commands.  It also contains the commands dispatch table.
;   See the comments in QQQ_CMD.DSPIC for a description of the interface to this
;   module.
;

;*******************************************************************************
;
;   Configuration constants.
;
/const   stacksz_cmd integer = 128 ;command processing task stack size, bytes
;
;   Derived constants.
;
/var new ii integer //scratch integer
/var new tk string //scratch token

//   Make sure all the optional configuration parameters exist.  These are
//   created and set to their default values if not already existing.
//
/if [not [exist "name"]] then
  /const name string = ""
  /endif
/if [not [exist "uart_name"]] then
  /const uart_name string = name
  /endif
/if [not [exist "bufsize"]] then
  /const bufsize integer = 0
  /endif
/if [not [exist "sendnnop"]] then
  /const sendnnop integer = 16
  /endif
/if [not [exist "debug_cmddel"]] then
  /const debug_cmddel bool = false
  /endif
/if [not [exist "cmddone_set"]] then
  /const cmddone_set string = ""
  /endif
/if [not [exist "cmddone_clr"]] then
  /const cmddone_clr string = ""
  /endif

//   Create the string constants used to customize symbol names.  These
//   constants are:
//
//     CMD
//
//       CMD or CMD_name leading part of CMD_xxx symbols.
//
//     UART
//
//       UART or UART_name leading part of UART_xxx symbols.
//
//     SUFF
//
//       The empty string or "_name" for adding to the middle or end of CMD_xxx
//       names.
//
/if [= name ""]
  /then                      ;no name given to CMD_xxx symbols
    /const suff string = ""
  /else                      ;CMD has a specific name
    /const suff string = [str "_" name]
  /endif
/const   cmd     string = [str "cmd" suff]
/const   cmdpref string = [str cmd "_"]

/if [= uart_name ""]
  /then                      ;no name given to UART_xxx symbols
    /const uart string = "uart"
  /else                      ;UART has a specific name
    /const uart string = [str "uart_" uart_name]
  /endif

//   Gather information on the implemented commands.  Commands are defined by
//   constants CMD_xxx, where xxx is a command name.  These are string constants
//   containing the command number, optionally followed by the name of the
//   command routine entry point.
//
//   This section creates the following constants:
//
//     CMDnENTRY
//
//       N is the 0 to 255 opcode value in decimal.  These are string constants
//       containing the name of the command routine entry point for that
//       command.  One of these constants is created for each implemented
//       command.
//
//     LASTCMD
//
//       Integer value of the largest opcode of any implemented command.
//
//     NCOMMANDS
//
//       Number of implemented commands.
//
/var new lastcmd integer
/var new ncommands integer
/set ii [slen cmdpref] //length of fixed starting part of CMD_ names

/loop symbols sym vcon
  /var local sy string //bare variable or constant name
  /var local opc integer //opcode
  /var local entpnt string //command routine entry point name

  /set sy [sym sym name]
  /if [<= [slen sy] ii] then
    /repeat
    /endif
  /if [<> [substr 1 ii sy] cmdpref] then
    /repeat
    /endif

  /call parse_cmd [chars sy] [chars suff]
  /set lastcmd [max lastcmd opc] //update last-implemented opcode
  /const cmd[v opc]entry string = entpnt //make constant for this opcode
  /set ncommands [+ ncommands 1] //count one more implemented command
  /endloop

;*******************************************************************************
;
;   Variables.
;
;*******************
;
;   Global state.
;
.section .ram_[chars cmd], bss

/if [> bufsize 0] then
allocg   ncmdbuf[chars suff] ;number of bytes in commands scratch buffer
allocg   cmdbuf[chars suff], [v bufsize] ;commands scratch buffer
  /endif

;*******************
;
;   Local state.
;
alloc    stack_cmd, [v stacksz_cmd], 2 ;command processing task stack


.section .code_[chars cmd], code
;*******************************************************************************
;
;   Subroutine CMD_INIT
;
;   Initialize the hardware and software state managed by this module.
;
         glbsub  [chars cmd]_init

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUTROOM
;
;   Get the number of bytes that can be written immediately to the output
;   without stalling.  The value is returned in W0.
;
         glbsub  cmd_putroom

/if [exist "putroom:macro"]
  /then                      ;use custom macro
         putroom
         leaverest
  /else                      ;no macro, default to asking UART
         gjump   [chars uart]_outn ;get room in output FIFO, return to caller
  /endif

;*******************************************************************************
;
;   Subroutine CMD_LOCK_OUT
;
;   Lock the output stream for this command processing task.  The output stream
;   must be locked by command processing routines before sending any responses.
;
         glbsubd [chars cmd]_lock_out

/if [exist "lock:macro"]
  /then                      ;use custom macro
         lock

         leaverest
  /else                      ;no macro
         gjump   [chars uart]_lock ;acquire the lock, return to caller
  /endif

;*******************************************************************************
;
;   Subroutine CMD_UNLOCK_OUT
;
;   Release any command output stream lock held by this command processing task.
;
         glbsubd [chars cmd]_unlock_out

/if [exist "unlock:macro"]
  /then                      ;use custom macro
         unlock

         leaverest
  /else                      ;no macro
         gjump   [chars uart]_unlock ;release the lock, return to caller
  /endif

;*******************************************************************************
;
;   Subroutine CMD_LOCK_OUT_N
;
;   Lock the output stream only if N bytes can be written to it immediately.  N
;   is passed in W0.  The Z flag is cleared if the output is locked, and set if
;   not.
;
         glbsub  cmd_lock_out_n, regf0 | regf1

         mov     w0, w1      ;save min required output room in W1
         mcall   cmd_lock_out ;get the lock on the output stream
         mcall   cmd_putroom ;get number of byte that can be written immediately
         cp      w0, w1      ;available to required
         bra     ltu, lckn_no ;not enough room ?
         bclr    Sr, #Z      ;indicate sufficient room output locked
lckn_leave:                  ;common exit point, Z all set
         leaverest

lckn_no:                     ;there is insufficient room
         mcall   cmd_unlock_out ;release the lock on the output stream
         bset    Sr, #Z      ;indicate insufficient room, output not locked
         jump    lckn_leave

;*******************************************************************************
;
;   Subroutine CMD_GET_CHECK
;
;   Set the Z flag iff no command stream byte is immediately available.
;
         glbsub  [chars cmd]_get_check

/if [exist "getcheck:macro"]
  /then                      ;use custom macro
         getcheck

         leaverest
  /else                      ;no macro
         gjump   [chars uart]_get_ready
  /endif

;*******************************************************************************
;
;   Subroutine CMD_GET8
;
;   Get the next 8 bit byte from the command input stream into W0.  This routine
;   waits indefinitely until a byte is available.
;
/if using_xc16 then
         glbent  _[chars cmd]_get8u
  /endif
         glbsub  [chars cmd]_get8

/if [exist "getbyte:macro"]
  /then                      ;use custom macro
         getbyte

         leaverest
  /else                      ;no macro
         gjump   [chars uart]_get ;get the byte from the UART, return to caller
  /endif

;*******************************************************************************
;
;   Subroutine CMD_GET8S
;
;   Get the next 8 bit byte from the command input stream as a signed integer
;   into W0.
;
         glbsubd [chars cmd]_get8s

         mcall   [chars cmd]_get8 ;get the byte in the low bits of W0
         se      w0, w0      ;sign-extend low byte into all of W0

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_GET16
;
;   Get the next two bytes from the command input stream as a 16 bit value into
;   W0.  The bytes are assumed to be in most to least significant order.
;
/if using_xc16 then
         glbent  _[chars cmd]_get16u
         glbent  _[chars cmd]_get16s
  /endif

         glbsub  [chars cmd]_get16, regf1

         mcall   [chars cmd]_get8 ;get the high byte into W0
         sl      w0, #8, w1  ;save it in W1 in the right position
         mcall   [chars cmd]_get8 ;get the low byte into W0
         ior     w1, w0, w0  ;assemble the 16 bit word in W0

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_GET24U
;
;   Get the next three bytes from the command input stream as a unsigned 24 bit
;   integer into W1:W0.  The bytes are assumed to be in most to least
;   significant order.
;
         glbsubd [chars cmd]_get24u

         mcall   [chars cmd]_get8 ;get the high byte
         mov     w0, w1
         mcall   [chars cmd]_get16 ;get the low word

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_GET24S
;
;   Get the next three bytes from the command input stream as a signed 24 bit
;   integer into W1:W0.  The bytes are assumed to be in most to least
;   significant order.
;
         glbsubd [chars cmd]_get24s

         mcall   [chars cmd]_get8 ;get the high byte
         se      w0, w1      ;sign extend and save it in W1
         mcall   [chars cmd]_get16 ;get the low word

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_GET32
;
;   Get the next four bytes from the command input stream as a 32 bit value into
;   W1:W0.  The bytes are assumed to be in most to least significant order.
;
/if using_xc16 then
         glbent  _[chars cmd]_get32u
         glbent  _[chars cmd]_get32s
  /endif

         glbsub  [chars cmd]_get32

         mcall   [chars cmd]_get16 ;get the high word
         mov     w0, w1
         mcall   [chars cmd]_get16 ;get the low word

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUT8
;
;   Write the byte in the low 8 bits of W0 to the response stream for this
;   command processing task.
;
/if using_xc16 then
         glbent  _[chars cmd]_put8u
         glbent  _[chars cmd]_put8s
  /endif
         glbsub  [chars cmd]_put8

/if [exist "putbyte:macro"]
  /then                      ;use custom macro
         putbyte

         leaverest
  /else                      ;no macro
         gjump   [chars uart]_put ;write the byte to the UART, return to caller
  /endif

;*******************************************************************************
;
;   Subroutine CMD_PUT16
;
;   Write the 16 bit word in W0 to the response stream.  The bytes are written
;   in most to least significant order.
;
/if using_xc16 then
         glbent  _[chars cmd]_put16u
         glbent  _[chars cmd]_put16s
  /endif

         glbsub  [chars cmd]_put16

         swap    w0
         mcall   [chars cmd]_put8 ;send the high byte
         swap    w0
         mcall   [chars cmd]_put8 ;send the low byte

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUT24
;
;   Write the 24 low bits of W1:W0 to the response stream.  The bytes are
;   written in most to least significant order.
;
/if using_xc16 then
         glbent  _[chars cmd]_put24u
         glbent  _[chars cmd]_put24s
  /endif

         glbsub  [chars cmd]_put24

         exch    w0, w1
         mcall   [chars cmd]_put8 ;send the high byte
         exch    w0, w1
         mcall   [chars cmd]_put16 ;send the low word

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUT32
;
;   Write the 32 bit word in W1:W0 to the response stream.  The bytes are
;   written in most to least significant order.
;
/if using_xc16 then
         glbent  _[chars cmd]_put32u
         glbent  _[chars cmd]_put32s
  /endif

         glbsub  [chars cmd]_put32

         exch    w0, w1
         mcall   [chars cmd]_put16 ;send the high word
         exch    w0, w1
         mcall   [chars cmd]_put16 ;send the low word

         leaverest

;*******************************************************************************
;
;   Subroutine CMD_PUTBUF
;
;   Write the low 8 bits of W0 as the next byte into the commands scratch
;   buffer.  Nothing is done if the buffer is already full.  NCMDBUF is udpated
;   as appropriate to contain the total number of bytes in the buffer.  Note
;   that the buffer is automatically reset to empty before each command routine
;   is run.  This buffer may only be used by the command processing task.  The
;   buffer is made global so that command processing routines can be in other
;   modules.
;
/if [> bufsize 0] then
         glbsub  [chars cmd]_putbuf, regf1 | regf2

         mov     ncmdbuf[chars suff], w1 ;get number of bytes already in the buffer
         mov     #[v bufsize], w2 ;get maximum bytes allowed in the buffer
         cp      w1, w2
         bra     geu, pbuf_leave ;buffer is already full, nothing more to do

         mov     #cmdbuf[chars suff], w2 ;get address of start of buffer
         add     w2, w1, w2  ;point W2 to where to store this byte
         mov.b   w0, [w2]    ;stuff the byte into the buffer

         add     #1, w1      ;update number of bytes in the buffer
         mov     w1, ncmdbuf[chars suff]

pbuf_leave:                  ;common exit point
         leaverest
  /endif

;*******************************************************************************
;
;   Subroutine CMD_PUTBUFN
;
;   Get the next N bytes from the command stream and save them into the command
;   routines scratch buffer, CMDBUF.  N is passed in W0.
;
;   N bytes are always read from the command stream.  However, bytes are not
;   saved after the buffer is full.
;
/if [> bufsize 0] then
         glbsub  [chars cmd]_putbufn, regf0 | regf1

         mov     w0, w1      ;init number of bytes left to do
pbn_byte:                    ;back here each new byte
         cp0     w1
         bra     z, pbn_done ;done with all the bytes ?
         mcall   [chars cmd]_get8 ;get the next input byte into W0
         mcall   [chars cmd]_putbuf ;save it in the scratch buffer
         sub     #1, w1      ;count one less byte left to do
         jump    pbn_byte    ;back to do next byte
pbn_done:                    ;done copying all the bytes
         leaverest
  /endif

;*******************************************************************************
;
;   Subroutine CMD_START
;
;   Start the command stream processing tasks.
;
         glbsub  [chars cmd]_start, regf13 | regf14

         start_task cmd

         leaverest

;*******************************************************************************
;
;   Routine CMD_TASK
;
;   This code is run in a separate task.  The task reads the command stream,
;   processes the commands, and possibly sends responses.
;
cmd_task_start:              ;task starts here
;
;   Drain and discard any received command stream bytes.  The command stream is
;   considered drained if no new byte is received for DRAINWAIT seconds.
;
/if [exist "drainwait:vcon"] then
         mov     tick1ms, w1 ;init clock tick up to date with

cmd_drain_reset:             ;back here to restart the drain time
         mov     #[rnd [* drainwait 1000]], w2 ;init or reset ms left to wait

cmd_drain_check:             ;back here each new drain iteration
         gcall   task_yield_save ;give all other tasks a chance to run
         ;
         ;   Check for byte available.  Reset the drain wait time if so.
         ;
         mcall   cmd_get_check ;set Z iff no byte available
         bra     z, cmd_drain_nb ;no byte is immediately available
         mcall   cmd_get8    ;read and discard the byte
         jump    cmd_drain_reset ;reset the wait time until drained
cmd_drain_nb:                ;no byte is currently available
         ;
         ;   Check for new clock tick.
         ;
cmd_drain_clock:
         mov     tick1ms, w0 ;get current clock value
         cp      w1, w0      ;compare to last value up to date with
         bra     z, cmd_drain_check ;no new clock tick ?
         ;
         ;   A new clock tick has occurred.
         ;
         add     #1, w1      ;update clock value now current with
         sub     #1, w2      ;count one less tick left to wait
         bra     nz, cmd_drain_clock ;wait time not expired yet ?

cmd_drain_done:
  /endif
;
;   Send a bunch of NOP responses so that the host will be in sync with our
;   response stream.  The number of NOPs to send is set by the constant SENDNNOP
;   at the top of this module.  This section is omitted when SENDNNOP is 0.
;
/if [> sendnnop 0] then
         mov     #[v sendnnop], w1 ;init number of NOPs left to send
         gcall   [chars cmd]_lock_out ;acquire exclusive lock on the response stream
loop_nop:
         mov     #[v rsp[chars suff]_nop], w0
         gcall   [chars cmd]_put8 ;send one NOP
         sub     #1, w1      ;count one less NOP left to send
         bra     nz, loop_nop ;back to send the next NOP
         gcall   [chars cmd]_unlock_out ;release lock on the response stream
  /endif
;
;   Send the FWINFO response.
;
/if [exist "rsp_fwinfo:vcon"] then
         gcall   send_fwinfo ;send initial response giving our firmware info
  /endif
;
;   Go process commands.  Execution jumps to CMD_FIRST to allow for processing
;   that is done after each command, but not before the first command.
;
         jump    cmd_first
;
;   Return point after done executing a command.  Command routines can jump here
;   from nested subroutines or with data on the stack.  The stack will be reset
;   to empty before any further processing.
;
cm_nop:                      ;NOP command dispatch point
         glbent  [chars cmd]_done

         disi    #1
         mov     #stack_cmd, w15 ;reset the stack to empty
         mcall   [chars cmd]_unlock_out ;make sure this task is not holding output lock

/if [<> cmddone_set ""] then
         setflag [chars cmddone_set] ;indicate that a command was just completed
  /endif
/if [<> cmddone_clr ""] then
         clrflag [chars cmddone_clr] ;indicate that a command was just completed
  /endif

cmd_first:                   ;skip to here to get the first command
/if [> bufsize 0] then
         mov     #0, w0
         mov     w0, ncmdbuf[chars suff] ;reset the commands scratch buffer to empty
  /endif
;
;   Get and process the next command.
;
         mcall   [chars cmd]_get8 ;get the opcode byte into W0
;
;   Ignore this opcode if it is out of range.
;
/if [< lastcmd 255] then     ;only a partial dispatch table is in use ?
         mov     #[v lastcmd], w1 ;get largest valid opcode
         cp      w0, w1
         bra     gtu, [chars cmd]_done ;opcode is out of range ?
  /endif
;
;   If the DEBUG_CMDDEL switch is enabled, wait a while for any parameters for
;   this command to arrive.  This makes single stepping thru command
;   interpretation possible since all data bytes will already have been received
;   by the hardware and they will be coming from the software FIFO.
;
/if debug_cmddel then
         mov     w0, w1      ;temp save the opcode byte
         mov     #10, w0     ;number of ms ticks to wait
         gcall   waitms      ;do the wait
         mov     w1, w0      ;restore the opcode into W0
  /endif
;
;   Jump to the command routine for the opcode in W0.
;
         mov     #tbloffset([chars cmd]_done), w1 ;put CMD_DONE as return address onto stack
         mov     w1, [w15++]
         mov     #tblpage([chars cmd]_done), w1
         and     #127, w1
         mov     w1, [w15++]

         mov     #tbloffset([chars cmd]_tbl), w1 ;get command table address into W2:W1
         mov     #tblpage([chars cmd]_tbl), w2
         and     #127, w2
         sl      w0, #1, w3  ;make offset into table for this opcode
         add     w1, w3, w1  ;make table entry address in W2:W1
         addc    #0, w2
         mov     w2, Tblpag  ;set high bits of program memory address to fetch
         tblrdl  [w1], [w15++] ;fetch low 16 bits and push them onto the stack
         tblrdh  [w1], [w15++] ;fetch and push the remaining high bits
         return              ;jump to the address just pushed onto the stack

;*******************************************************************************
;
;   Commands dispatch table.
;
;   There is one entry for each opcode from 0 to the maximum implemented opcode.
;   Each entry is a single instruction word that contains the address of the
;   routine to execute the command for that opcode.
;
[chars cmd]_tbl:
//
//   Build the table from the CMDnENTRY constants.  One of these constants exist
//   for each implemented opcode.  The constants is a string that is the name
//   of the command routine entry point.
//
/loop with ii from 0 to lastcmd
  /set tk ""
  /call tabopcode tk
  /append tk ".pword"
  /call taboperand tk
  /if [exist [str "cmd" ii "entry"]]
    /then                    ;this command is defined
      /append tk cmd[v ii]entry
    /else                    ;this command is not defined
      /append tk cmd "_done"
    /endif
  /call startcomm tk
  /append tk [str ii]
  /write tk
  /endloop

/set tk ""
/append tk ncommands " commands implemented"
/append tk ", in 0 to " lastcmd " range."
/append tk "  " [rnd [/ ncommands 2.56]] "% of total 0-255 range used."
/show "  " tk
