;   ***************************************************************
;   * Copyright (C) 2017, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Routines for interfacing between code written in XC16 and the rest of the
;   system.
;
/include "qq2.ins.dspic"

;*******************************************************************************
;
;   Configuration constants.
;
/const   using_nvol bool = false ;whether non-volatile memory routines in use
;
;   Derived constants.
;
/block
  /var local ii integer
  /var local r real
  /var local s string

  /endblock

;*******************************************************************************
;
;   Variables.
;
;*******************
;
;   Global state.
;
.section .ram_xc16, bss


;*******************
;
;   Local state.
;


.section .code_xc16, code
;*******************************************************************************
;
;   Subroutine XC16_INIT
;
;   Initialize the hardware and software state managed by this module.
;
         glbsub  xc16_init

         leaverest

;*******************************************************************************
;
;   C subroutine SYSTEM_RESET
;
;   Reset the processor.
;
         glbent  _system_reset

/if using_nvol then
         gcall   nvol_flush  ;make sure no cached but unwritten nvol data
  /endif

         reset

;*******************************************************************************
;
;   C subroutine DEBUG0 (string)
;
;   Sends a DBG0 response over the service port.  The intent is that the string
;   will be displayed somewhere for debugging purposes.  On entry, the registers
;   contain:
;
;     W0  -  Start of address of null-terminated string to display.
;
;   Registers W0-W7 may be trashed.
;
/if [exist "rsp_dbg0"] then
         glbsubc debug0

         mov     w0, w1      ;save pointer to the string in W1
;
;   Register usage:
;
;     W0  -  Scratch
;
;     W1  -  Pointer to string
;
;     W2  -  Length of string in bytes
;
;   Set W2 to the length of the string.  Will be 0-255.
;
         mov     w1, w2      ;init pointer to the current string byte
db0_len:                     ;back here to check each new byte
         cp0.b   [w2++]
         skip_z              ;found the terminating 0 ?
         jump    db0_len     ;no, go back and check next byte

         sub     w2, w1, w2  ;make total number of bytes examined
         sub     #1, w2      ;make number of bytes in the string
         and     #0xFF, w2   ;force to legal range
;
;   Send the DBG0 response.
;
         gcall   cmd_lock_out ;acquire lock on response stream
         mov     #[v rsp_dbg0], w0
         gcall   cmd_put8    ;DBG0 response opcode
         mov     w2, w0
         gcall   cmd_put8    ;number of characters in the string

         cp0     w2
         bra     z, db0_done ;no string bytes to send ?
db0_strbyte:                 ;back here each string byte
         mov.b   [w1++], w0  ;fetch this string byte
         gcall   cmd_put8    ;send it
         sub     #1, w2      ;count one less byte left to do
         bra     nz, db0_strbyte ;back to do next byte

db0_done:
         gcall   cmd_unlock_out ;release lock on response stream
         leaverest
  /endif

;*******************************************************************************
;
;   C subroutine DEBUG1 (word, string)
;
;   Sends a DBG1 response over the service port.  The intent is to have the
;   integer value and string displayed together.  On entry, the registers
;   contain:
;
;     W0  -  16 bit value to display.
;
;     W1  -  Start of address of null-terminated string to display.
;
;   Registers W0-W7 may be trashed.
;
/if [exist "rsp_dbg1"] then
         glbsubc debug1

         mov     w0, w2      ;save data word in W2
;
;   Register usage:
;
;     W0  -  Scratch
;
;     W1  -  Pointer to string byte
;
;     W2  -  Data word from caller
;
;     W3  -  Length of string in bytes
;
;
;   Look thru the string to determine how long it is.
;
         mov     w1, w3      ;init pointer to string byte
db1_len:                     ;back here to check each new byte
         cp0.b   [w3++]
         skip_z              ;found the terminating 0 ?
         jump    db1_len     ;no, go back and check next byte

         sub     w3, w1, w3  ;make total number of bytes examined
         sub     #1, w3      ;make number of bytes in the string
         and     #0xFF, w3   ;force to legal range
;
;   Send the DBG1 response.
;
         gcall   cmd_lock_out ;acquire lock on response stream
         mov     #[v rsp_dbg1], w0
         gcall   cmd_put8    ;DBG1 response opcode
         mov     w2, w0
         gcall   cmd_put16   ;data word from caller
         mov     w3, w0
         gcall   cmd_put8    ;number of characters in the string

         cp0     w3
         bra     z, db1_done ;no string bytes to send ?
db1_strbyte:                 ;back here each string byte
         mov.b   [w1++], w0  ;fetch this string byte
         gcall   cmd_put8    ;send it
         sub     #1, w3      ;count one less byte left to do
         bra     nz, db1_strbyte ;back to do next byte

db1_done:
         gcall   cmd_unlock_out ;release lock on response stream
         leaverest
  /endif

;*******************************************************************************
;
;   C subroutine DEBUG2 (word, string)
;
;   Sends a DBG2 response over the service port.  The intent is to have the
;   integer value and string displayed together.  On entry, the registers
;   contain:
;
;     W1:W0  -  32 bit value to display.
;
;     W2  -  Start of address of null-terminated string to display.
;
;   Registers W0-W7 may be trashed.
;
/if [exist "rsp_dbg2"] then
         glbsubc debug2

         mov     w1, w4      ;save high word of data value
         mov     w2, w1      ;set pointer to string
         mov     w0, w2      ;save low word of data value
;
;   Register usage:
;
;     W0  -  Scratch
;
;     W1  -  Pointer to string byte
;
;     W2  -  Low word of 32 bit data value
;
;     W3  -  Length of string in bytes
;
;     W4  -  High word of 32 bit data value
;
;   Look thru the string to determine how long it is.
;
         mov     w1, w3      ;init pointer to string byte
db2_len:                     ;back here to check each new byte
         cp0.b   [w3++]
         skip_z              ;found the terminating 0 ?
         jump    db2_len     ;no, go back and check next byte

         sub     w3, w1, w3  ;make total number of bytes examined
         sub     #1, w3      ;make number of bytes in the string
         and     #0xFF, w3   ;force to legal range
;
;   Send the DBG2 response.
;
         gcall   cmd_lock_out ;acquire lock on response stream
         mov     #[v rsp_dbg2], w0
         gcall   cmd_put8    ;DBG2 response opcode
         mov     w4, w0
         gcall   cmd_put16   ;high words of 32 bit data
         mov     w2, w0
         gcall   cmd_put16   ;low word of 32 bit data
         mov     w3, w0
         gcall   cmd_put8    ;number of characters in the string

         cp0     w3
         bra     z, db2_done ;no string bytes to send ?
db2_strbyte:                 ;back here each string byte
         mov.b   [w1++], w0  ;fetch this string byte
         gcall   cmd_put8    ;send it
         sub     #1, w3      ;count one less byte left to do
         bra     nz, db2_strbyte ;back to do next byte

db2_done:
         gcall   cmd_unlock_out ;release lock on response stream
         leaverest
  /endif

.end
