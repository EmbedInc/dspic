;   ***************************************************************
;   * Copyright (C) 2018, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Canned code for the CONFIG module.  See the header comments in
;   QQQ_CONFIG.DSPIC for a overview of the configuration mechanism.
;
;   Configuration Data Format
;
;     The static configuration is stored in non-volatile memory starting at the
;     fixed address indicated by the CONFIG_START constant.  The configuration
;     data is a sequence of bytes:
;
;       ID
;
;         The ID of a particular module or subystem.  The IDs 0 - 254 indicate
;         specific modules.  The special ID of 255 indicates the end of the
;         configuration data.
;
;         Note that a fully erased non-volatile memory (all bytes set to 255)
;         therefore specifies no configuration data at all.
;
;       OPC
;
;         The high 3 bits of this byte are a opcode.  The remaining low 5 bits
;         are interpreted uniquely according to the opcode.  The following
;         opcodes are defined:
;
;           0  -  Immediate data.
;
;             The low 5 bits of OPC indicate the number of data bytes following,
;             minus 1.  This opcode is therefore always followed by 1 to 32 data
;             bytes.  These data bytes are the configuration data for the ID
;             preceeding the OPC byte.
;
;           1  -  Indirect data, 21 bit address.
;
;             The low 5 bits of the opcode byte and the following two bytes form
;             a 21 bit address.  The configuration data for this ID is stored
;             starting at that address.  The 16 bits immediately at the address
;             indicate the number of data bytes to follow.
;
;           2  -  Indirect data, 29 bit address.
;
;             The low 5 bits of the opcode byte and the following three bytes
;             form a 29 bit address.  The configuration data for this ID is
;             stored starting at that address.  The 16 bits immediately at the
;             address indicate the number of data bytes to follow.
;
;           3  -  Extended opcode.
;
;             The low 5 bits of the OPC byte are interpreted as a opcode.  The
;             following opcodes are defined:
;
;               0  -  Indirect data, 32 bit address.
;
;                 The following four bytes form a 32 bit address.  The
;                 configuration data for this ID is stored starting at that
;                 address.  The 16 bits immediately at the address indicate the
;                 number of data bytes to follow.
;
;           4, 5, 6, 7  -  Indirect data, 15 bit address.
;
;             The low 7 bits of the opcode byte and the following byte form a 15
;             bit address.  The configuration data for this ID is stored
;             starting at that address.  The 16 bits immediately at the address
;             indicate the number of data bytes to follow.
;
;             Note that this opcode is indicated whenever the high bit of the
;             OPC byte is set.
;
;         Undefined opcodes are errors, and cause the system to stop reading
;         the configuration.
;
;       The next byte after all data following a OPC byte is another ID byte.
;       This pattern repeats until the special ID of 255 is encountered, which
;       indicates end of configuration data.
;
;     Multi-byte data is stored in most to least significant byte order.
;
;     The module IDs can appear in any order.  There is no meaning to the
;     storage order of module IDs, and the order is not exported to the rest of
;     the system.
;

;*******************************************************************************
;
;   Configuration constants.
;
/if [not [exist "config_start:vcon"]] then
  /const config_start integer = 0
  /endif
/if [not [exist "config_indirect:vcon"]] then
  /const config_indirect integer = 0
  /endif
/if [not [exist "config_ind_hilo:vcon"]] then
  /const config_ind_hilo bool = true
  /endif

/if [> config_indirect 4] then
  /show "  CONFIG_INDIRECT of " config_indirect " is out of range."
         .error  "CONFIG_INDIRECT"
         .end
  /stop
  /endif

/const   ovrwint real = 0.100 ;CFGOVR0 time window, seconds
;
;   Derived constants.
;
/block
  /var local ii integer
  /var local r real
  /var local s string

  /const mdevbuild bool = [exist "config_mdevs_notsys:macro"]

  /if [= config_indirect 0]
    /then
      /set s "Configuration data starts at "
      /append s [int config_start "base 16 usin"] "h"
      /append s " (" config_start ")"
    /else
      /set s "Config start adr at "
      /append s [int config_start "base 16 usin"] "h"
      /append s ", " config_indirect " bytes, "
      /if config_ind_hilo
        /then
          /append s "high to low"
        /else
          /append s "low to high"
        /endif
      /append s " byte order"
    /endif
  /show "  " s

  /endblock

;*******************************************************************************
;
;   Variables.
;
;*******************
;
;   Global state.
;
.section .ram_config, bss    ;variables in normal RAM


;*******************
;
;   Local state.
;
alloc    ntotal              ;total number of config bytes for this subsystem
alloc    nleft               ;number of config bytes left to read at curr ADR
alloc    adr0,   4           ;nvol address of first config data byte
alloc    adr,    4           ;nvol address to read next config data byte from
alloc    index               ;user-visible 0-N index of next config byte
alloc    datovrr             ;single config byte when override on
;
;   Local state in near memory.
;
.section .near_config, bss, near ;varibles in near RAM

alloc    lock                ;ID of task holding lock when FLG_LOCK set

alloc    flags               ;individual 1-bit flags, use FLG_xxx bit numbers
         ;
         ;   Bits in FLAGS word.  Each symbol is the number of its flag bit.
         ;
.equiv   flg_lock, 0         ;routines are locked, LOCK is ID of locking task
.equiv   flg_ovr0, 1         ;DATOVRR overrides the config data for subsystem 0
.equiv   flg_ovrr, 2         ;data is being overridden


.section .code_config, code
;*******************************************************************************
;
;   Subroutine CONFIG_INIT
;
;   Initialize the hardware and software state managed by this module.
;
         glbsub  config_init, regf0

         clr     flags       ;init all flags to off

         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_LOCK
;
;   Acquire the lock to the current task.
;
         glbsubd config_lock, regf0

         mov     currtask, w0 ;get the ID of this task into W0

lck_retry:                   ;back here to check the lock again
         btss    flags, #flg_lock ;already locked ?
         jump    lck_free    ;no
         cp      lock        ;compare locking task to curr task
         bra     z, lck_leave ;this task is already holding the lock ?
         gcall   task_yield_save ;give other tasks a chance to run
         jump    lck_retry   ;back to check on the lock again
;
;   Grab the lock.  W0 contains the ID of the current task.
;
lck_free:                    ;the lock is currently free
         bset    flags, #flg_lock ;indicate now locked
         mov     w0, lock    ;save the ID of the task holding the lock

         bclr    flags, #flg_ovrr ;init to override off
         mov     #0, w0
         mov     w0, ntotal  ;init to no config bytes
         mov     w0, nleft
         mov     w0, adr0+0  ;init addresses
         mov     w0, adr0+2
         mov     w0, adr+0
         mov     w0, adr+2
         mov     w0, index   ;init index of next config byte

lck_leave:
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_UNLOCK
;
;   Release the lock, if held by the current task.  Only the task holding the
;   lock can release it.
;
         glbsubd config_unlock, regf0

         mov     currtask, w0 ;get the ID of the current task into W0
         cp      lock        ;compare locking task to current task
         bra     nz, ulk_leave ;not the same tasks ?

         bclr    flags, #flg_lock ;release the lock

ulk_leave:
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_SETUP
;
;   Look up the configuration data for a particular subsystem ID.  The ID is
;   passed in the low 8 bits of W0.
;
;   W0 is returned the number of configuration bytes for the indicated ID.  Note
;   that this can be 0, which indicates the subsystem is not used.  The Z flag
;   is set if there are no config data bytes, and cleared if there is at least
;   one.
;
         glbsubd config_setup, regf1 | regf2 | regf3 | regf4 | regf5 | regf6

         ze      w0, w3      ;save target ID in W3
;
;   Send the CFGING response, if this is enabled.
;
/if [exist "rsp_cfging:vcon"] then
         skip_nflag cfgdone  ;still in initial configuring of subsystems ?
         jump    cfgg_dcfging ;no, don't send response

         gcall   cmd_lock_out ;acquire lock on the response stream

         mov     #[v rsp_cfging], w0 ;send the response opcode
         gcall   cmd_put8

         mov     w3, w0      ;send the subsystem ID
         gcall   cmd_put8

         gcall   cmd_unlock_out ;release lock on response stream
cfgg_dcfging:
  /endif                     ;end of CFGING response enabled
;
;   Handle special case of subsystem 0, and the data for subsystem 0 being
;   overridden.  The Z bit is set according to the subsystem ID.
;
         bclr    flags, #flg_ovrr ;init to not in active override

         bra     nz, cfgg_n0 ;not subsystem 0 ?
         btss    flags, #flg_ovr0 ;override subsytem 0 ?
         jump    cfgg_n0     ;no
         ;
         ;   Subsystem 0 config is being requested, and its data is being
         ;   overridden.
         ;
         bset    flags, #flg_ovrr ;indicate data being overridden
         mov     #1, w0      ;number of config data bytes
         load32  w1, 0       ;set "address" of first byte
         jump    cfgg_ret    ;init state and return to caller

cfgg_n0:                     ;done checking for subsystem 0 override
;
;   Process the config opcodes.
;
         load32  w1, [v config_start] ;init non-volatile memory address in W2:W1

/if [> config_indirect 0] then ;indirect address exists ?
;
;   CONFIG_START is the indirect start address, not directly the address to
;   start reading configuration data at.  W2:W1 have been set to CONFIG_START.
;
;   CONFIG_INDIRECT is the 1-4 number size in bytes of the indirect address,
;   and CONFIG_IND_HILO indicates the byte order it is stored in.
;
  /if [= config_indirect 1] then ;1-byte indirect address ?
         gcall   nvol_read   ;get the address into W0
         mov     w0, w1      ;move it into W2:W1
         mov     #0, w2
    /endif

  /if [= config_indirect 2] then ;2-byte indirect address ?
         gcall   nvol_readw  ;get address into W0, lo-hi byte order
    /if config_ind_hilo then
         swap    w0          ;switch to hi-lo byte order
      /endif
         mov     w0, w1      ;move the address into W2:W1
         mov     #0, w2
    /endif

  /if [= config_indirect 3] then ;3-byte indirect address ?
    /if config_ind_hilo
      /then                  ;3 bytes, hi-lo order
         gcall   nvol_read   ;get high byte into W4
         mov     w0, w4
         gcall   nvol_readw  ;get low bytes into W0
         swap    w0
         mov     w0, w1      ;move the address into W2:W1
         mov     w4, w2
      /else                  ;3 bytes, lo-hi order
         gcall   nvol_readw  ;get low bytes into W4
         mov     w0, w4
         gcall   nvol_read   ;get high byte into W0
         mov     w4, w1      ;move the address into W2:W1
         mov     w0, w2
      /endif
    /endif

  /if [= config_indirect 4] then ;4-byte indirect address ?
    /if config_ind_hilo
      /then                  ;4 bytes, hi-lo order
         gcall   nvol_readw  ;get high word into W4
         swap    w0
         mov     w0, w4
         gcall   nvol_readw  ;get low word into W0
         swap    w0
         mov     w0, w1      ;move the address into W2:W1
         mov     w4, w2
      /else                  ;4 bytes, lo-hi order
         gcall   nvol_readw  ;get low word into W4
         mov     w0, w4
         gcall   nvol_readw  ;get high word into W0
         mov     w4, w1      ;move address into W2:W1
         mov     w0, w2
      /endif
    /endif
  /endif                     ;end of handling indirect address
;
;   Back here each new ID in the config data.  Register contents:
;
;     W0  -
;
;     W2:W2  -  Address of next NV byte to read.
;
;     W3  -  The configuration ID we are looking for.
;
;     W4  -
;
;     W5  -
;
;     W6  -
;
cfgg_id:                     ;back here for next ID
         gcall   nvol_read   ;get the ID for this record into W0
         cp      w0, #0xFF   ;compare to special end of list ID
         bra     z, cfgg_nfnd ;no data found for the target ID ?
         mov     w0, w4      ;save the ID of this record in W4

         gcall   nvol_read   ;get the opcode byte into W0
         lsr     w0, #5, w5  ;extract just the opcode into W5
         bra     z, cfgg_opc0 ;opcode 0 ?
         cp      w5, #1
         bra     z, cfgg_opc1 ;opcode 1 ?
         cp      w5, #2
         bra     z, cfgg_opc2 ;opcode 2 ?
         cp      w5, #3
         bra     z, cfgg_opc3 ;opcode 3 ?
         jump    cfgg_opc4   ;opcodes 4-7
;
;   Separate code to process each opcode.  Register contents:
;
;     W0  -  Complete OPC byte.
;
;     W2:W1  -  Next non-volatile memory address after the OPC byte.
;
;     W3  -  Target configuration ID from caller.
;
;     W4  -  The configuration ID of this record.
;
;     W5  -
;
;     W6  -
;
;
;   Opcode 0.  Immediate data follows opcode byte.
;
cfgg_opc0:
         and     w0, #0x1F, w0 ;make number of following data bytes in W0
         add     #1, w0
         cp      w4, w3      ;check the ID of this record
         bra     z, cfgg_ret ;ID matches, return with config data ?
         ;
         ;   Not this ID, skip over data bytes.
         ;
         add     w1, w0, w1  ;skip over the number of bytes in W0
         addc    #0, w2
         jump    cfgg_id     ;back to process next ID record
;
;   Opcode 1.  Indirect data, 21 bit address.  2 address bytes follow.
;
cfgg_opc1:
         and     w0, #0x1F, w5 ;save high 5 bits of indirect adr in W5
         gcall   nvol_readw  ;get low 16 bits of indirect address into W0
         cp      w4, w3      ;check the ID of this record
         bra     nz, cfgg_id ;not this ID record, go back for next ?
         ;
         ;   This record is for the requested ID.
         ;
         swap    w0          ;get low 16 address bits into correct format in W0
         mov     w0, w1      ;jump to the remote address
         mov     w5, w2
         ;
         ;   Common code to read the 16 bit number of data bytes, then return to
         ;   the caller.  The nvol address of the length word is in W2:W1.
         ;
cfgg_retlen:
         gcall   nvol_readw  ;get number of config data bytes into W0
         swap    w0
         jump    cfgg_ret    ;return with config data
;
;   Opcode 2.  Indirect data, 29 bit address.  3 address bytes follow.
;
cfgg_opc2:
         and     w0, #0x1F, w5 ;save high 5 bits of indirect adr in W5
         gcall   nvol_readw  ;get next 16 address bits into W6
         mov     w0, w6
         gcall   nvol_read   ;get low 8 address bits into W0
         cp      w4, w3      ;check the ID of this record
         bra     nz, cfgg_id ;not this ID record, go back for next ?
         ;
         ;   This record is for the requested ID.
         ;
         mov     w0, w1      ;init nvol address with bits <7:0>
         mov     #0xFF00, w0 ;merge in nvol address bits <15:8>
         and     w6, w0, w0
         ior     w1, w0, w1
         and     #0xFF, w6   ;set nvol address bits <23:16>
         mov     w6, w2
         sl      w5, #8, w5  ;merge in nvol address bits <28:24>
         ior     w2, w5, w2
         jump    cfgg_retlen ;get data length and return to caller
;
;   Opcode 3.  Extended opcode.  The low 5 bits of OPC are the opcode.
;
cfgg_opc3:
         and     #0x1F, w0   ;make 5 bit opcode in W0
         bra     z, cfgg_xopc_0 ;extended opcode 0 ?
         jump    cfgg_nfnd   ;unrecognized opcode, abort
;
;   Extended opcode 0.  Indirect data, 32 bit address.  4 address bytes follow.
;
cfgg_xopc_0:
         gcall   nvol_readw  ;save high 16 address bits in W5
         mov     w0, w5
         gcall   nvol_readw  ;get low 16 address bits into W0
         cp      w4, w3      ;check the ID of this record
         bra     nz, cfgg_id ;not this ID record, go back for next ?
         ;
         ;   This record is for the requested ID.
         ;
         swap    w0          ;jump to the indicated address
         mov     w0, w1
         swap    w5
         mov     w5, w2
         jump    cfgg_retlen ;get data length and return to caller
;
;   Opcodes 4, 5, 6, or 7.  Indirect data, 15 bit address.  1 address byte
;   follows.
;
cfgg_opc4:
         and     #0x7F, w0   ;save high 7 bits of address in W5
         mov     w0, w5
         gcall   nvol_read   ;get low 8 bits of address into W0
         cp      w4, w3      ;check the ID of this record
         bra     nz, cfgg_id ;not this ID record, go back for next ?
         ;
         ;   This record is for the requested ID.
         ;
         mov     w0, w1      ;set low 8 bits of address
         sl      w5, #8, w5  ;get next 7 address bits into position
         ior     w1, w5, w1  ;merge them into low address word
         mov     #0, w2      ;upper address word is always 0
         jump    cfgg_retlen ;get data length and return to caller
;
;   No config data for the requested ID was found.
;
cfgg_nfnd:
         mov     #0, w0      ;indicate no data
;
;   Return to the caller.  Register contents:
;
;     W0  -  Number of config data bytes.
;
;     W2:W1  -  Non-volatile memory address of the first config data byte
;
;     W3  -
;
;     W4  -
;
;     W5  -
;
;     W6  -
;
cfgg_ret:                    ;return to caller, W0 and W2:W1 all set
         mov     w0, ntotal  ;save total number of config data bytes
         mov     w0, nleft   ;init number of bytes left to read

         mov     w1, adr0+0  ;save config data bytes starting address
         mov     w2, adr0+2

         mov     w1, adr+0   ;init address to read the next config byte from
         mov     w2, adr+2

         mov     #0, w1
         mov     w1, index   ;init 0-N index of next config byte

         cp0     w0          ;Z iff no config data
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_I8U
;
;   Low level routine to get the next configuration data byte.  The byte is
;   treated as unsigned and expanded into all of W0.  If the configuration data
;   bytes have been exhausted, then a byte value of 0 is silently substituted.
;
         glbsubd config_i8u, regf1 | regf2

         mov     #0, w0      ;init to returning the default value
         mov     nleft, w1   ;get number of bytes left at curr position
         cp0     w1
         bra     z, gb_leave ;past end of config data bytes, return the 0 ?
         sub     #1, w1      ;update number of config bytes left after this one
         mov     w1, nleft
;
;   Check for special case of the data being overridden.
;
         btss    flags, #flg_ovrr ;override is in effect ?
         jump    gb_novrr    ;no

         mov     datovrr, w0 ;return the single override byte
         jump    gb_next     ;update state to next byte

gb_novrr:                    ;skip to here on data not being overridden
;
;   Fetch and return the next byte from non-volatile memory.
;
         mov     adr+0, w1   ;get the non-volatile memory address into W2:W1
         mov     adr+2, w2
         gcall   nvol_read   ;read the byte into W0, advance the address
         mov     w1, adr+0   ;update the address for next time
         mov     w2, adr+2
;
;   Advance the remaining state to the next byte.  NLEFT and ADR have already
;   been updated.
;
gb_next:
         mov     index, w1   ;update the user-visible byte index
         add     #1, w1
         mov     w1, index

gb_leave:                    ;the return value is in W0
         leaverest

;*******************************************************************************
;
;   Subroutines
;
;     CONFIG_IxxU
;     CONFIG_IxxS
;     CONFIG_FPxx
;
;   Various routines to get the next config data byte(s) in various formats.
;
;   The CONFIG_I.. routines return integers.  The trailing U or S in the name
;   denotes signed or unsigned.  The CONFIG_FP.. routines return floating point
;   values.  In all cases, XX in the name is the number of configuration bits
;   that will be fetched.
;
;   All these routines are layered on CONFIG_I8U (above), which fetches the next
;   byte and handles all the special cases.
;
         glbsubd config_i8s
         mcall   config_i8u  ;get the byte
         se      w0, w0      ;sign extend it
         leaverest

         glblabd config_i16s
         glbsubd config_i16u, regf1
         mcall   config_i8u  ;get the high byte
         sl      w0, #8, w1  ;move it into position and save it in W1
         mcall   config_i8u  ;get the low byte
         ior     w0, w1, w0  ;merge the two bytes into the 16 bit return value
         leaverest

         glbsubd config_i24u
         mcall   config_i8u  ;get the high byte
         mov     w0, w1
         mcall   config_i16u ;get the low word
         leaverest

         glbsubd config_i24s
         mcall   config_i8u  ;get the high byte
         se      w0, w1
         mcall   config_i16u ;get the low word
         leaverest

         glblabd config_i32s
         glblabd config_fp32
         glbsubd config_i32u
         mcall   config_i16u ;get the high word
         mov     w0, w1
         mcall   config_i16u ;get the low word
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_SKIP
;
;   Skip over the next W0 number of configuration bytes.  This is the same as
;   reading and discarding them.
;
         glbsubd config_skip, regf0 | regf1

         mov     nleft, w1   ;get the number of bytes left
         cp      w0, w1      ;compare skip amount to max possible
         bra     geu, skp_end ;skipping to or past the end ?
;
;   There will be bytes left after the skip.  Register contents:
;
;     W0  -  Number of bytes to skip forwards.
;
;     W1  -  Number of bytes currently left.
;
         sub     w1, w0, w1  ;update number of bytes that will be left
         mov     w1, nleft

         mov     adr+0, w1   ;update the address
         add     w1, w0, w1
         mov     w1, adr+0
         mov     adr+2, w1
         addc    #0, w1
         mov     w1, adr+2

         mov     index, w1   ;update the 0-N byte index
         add     w1, w0, w1
         mov     w1, index
         jump    skp_leave
;
;   All the remaining bytes are being skipped.  Set the state to immediately
;   after the last byte.
;
skp_end:
         mov     ntotal, w0  ;get the total bytes available
         mov     w0, index   ;set the index to after the last byte

         mov     adr0+0, w1  ;set curr address to after the last byte
         add     w1, w0, w1
         mov     w1, adr+0
         mov     adr0+2, w1
         addc    #0, w1
         mov     w1, adr+2

         mov     #0, w0      ;indicate no bytes left
         mov     w0, nleft

skp_leave:
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_INDEX
;
;   Get the user-visible 0-N of the next config byte.  The index is returned in
;   W0.
;
         glbsubd config_index

         mov     index, w0

         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_ADR
;
;   Get the non-volatile memory address of the next config byte.  The address is
;   returned in W2:W1.  The result is only valid when there is at least one byte
;   left to read.
;
         glbsub  config_adr

         mov     adr+0, w1
         mov     adr+2, w2

         leaverest

;*******************
;
;   C version of CONFIG_ADR.  The address is returned as the function value,
;   which is passed in W1:W0.
;
         glbsubc config_adr

         mov     adr+0, w0
         mov     adr+2, w1

         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_INDEX_SET
;
;   Set the index of the next configuration byte to read.  The new index is
;   passed in W0.
;
         glbsubd config_index_set, regf0 | regf1

         mov     index, w1   ;get the current index
         cp      w0, w1      ;compare new to current index
         bra     z, sind_leave ;no change, nothing to do ?
         bra     ltu, sind_back ;going backwards ?
;
;   The index is being moved forward.  Register contents:
;
;     W0  -  New index.
;
;     W1  -  Current index.
;
         sub     w0, w1, w0  ;make number of bytes to skip forward
         mcall   config_skip ;do the skip
         jump    sind_leave
;
;   The index is being moved backward.  Register contents:
;
;     W0  -  New index.
;
;     W1  -  Current index.
;
sind_back:
         mov     w0, index   ;update the index

         mov     ntotal, w1  ;update the number of bytes left to read
         sub     w1, w0, w1
         mov     w1, nleft

         mov     adr0+0, w1  ;set the new address from the new index
         add     w1, w0, w1
         mov     w1, adr+0
         mov     adr0+2, w1
         addc    #0, w1
         mov     w1, adr+2

sind_leave:
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_LEFT
;
;   Get the number of bytes left to read.  The value is returned in W0.
;
         glbsubd config_left

         mov     nleft, w0

         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_OVR0
;
;   Cause the configuration data for subsystem 0 to be the single byte in the
;   low bits of W0, regardless of non-volatile memory contents.
;
         glbsub  config_ovr0, regf0

         ze      w0, w0      ;make just the 0-255 byte value in W0
         mov     w0, datovrr ;save it as the override value
         bset    flags, #flg_ovr0 ;indicate to override subsystem 0 data

         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_OVR0_WINDOW
;
;   Allow the host a short time to override the subsystem 0 configuration data.
;
/if [exist "rsp_cfgovr0:vcon"] then //the CFGOVR0 response is defined ?
         glbsub  config_ovr0_window, regf0 | regf1

         gcall   cmd_lock_out ;acquire the lock on the response stream to the host
         mov     #[v rsp_cfgovr0], w0 ;get the CFGOVR0 response opcode
         setflag cfgovr0     ;enable the CFGOVR0 command
         gcall   cmd_put8    ;send the CFGOVR0 response
         gcall   cmd_unlock_out ;release lock on response stream to host
;
;   Wait for OVRWINT time or the CFGOVR0 flag getting cleared, whichever comes
;   first.  The CFGOVR0 flag is automatically cleared after every command from
;   the host is processed.
;
         mov     tick1ms, w1 ;init last tick updated to
         mov     #[rnd [* ovrwint 1000]], w0 ;init milliseconds left to wait

wind_loop:                   ;back here to wait for next tick
         gcall   task_yield_save ;give other tasks a chance to run
         skip_flag cfgovr0   ;CFGOVR0 command still enabled ?
         jump    wind_leave  ;no, all done

wind_tick:                   ;back here after processing a tick
         push    w2          ;temp save W2 on stack
         mov     tick1ms, w2 ;get current tick counter
         cp      w1, w2      ;compare to last value acted upon
         pop     w2          ;restore W2
         bra     z, wind_loop ;not a new tick this time ?
         ;
         ;   New 1 ms tick detected.
         ;
         add     #1, w1      ;update last tick value acted upon
         sub     #1, w0      ;count one less tick left to wait
         bra     nz, wind_tick ;wait time not elapsed yet ?
;
;   The wait time has elapsed.
;
         clrflag cfgovr0     ;the CFGOVR0 command will no longer be acted upon

wind_leave:
         leaverest
  /endif

;*******************************************************************************
;
;   Subroutine CONFIG_STAT
;
;   Indicate a event or status of a subsystem during configuration.  The
;   subsystem ID is in the low byte of W0, and the status code in the low byte
;   of W1.  Status codes with the high bit set (128 - 255) cause the CFGFAIL
;   flag to be set.  This indicates to the system after configuration is
;   complete that one or more subsystems could not be configured as required,
;   and that normal operation is not possible.
;
config_stat glbentd

         btsc    w1, #7      ;status code does not indicate failure ?
         setflag cfgfail     ;does indicate failure, set config failure flag
;
;   Fall thru to SEND_CFGSTAT, which will return to the caller
;
;*******************
;
;   Local subroutine SEND_CFGSTAT
;
;   Send a CFGSTAT response.  The SUBSYS parameter is in the low byte of W0, and
;   the STATUS parameter in the low byte of W1.
;
         locsub  send_cfgstat

/if [exist "rsp_cfgstat:const"] then
         gcall   cmd_lock_out ;acquire lock on response stream to host

         push    w0          ;temp save subsystem ID
         mov     #[v rsp_cfgstat], w0
         gcall   cmd_put8    ;send CFGSTAT response opcode
         pop     w0

         gcall   cmd_put8    ;send subsystem ID

         push    w0          ;temp save W0
         mov     w1, w0
         gcall   cmd_put8    ;send the status code
         pop     w0          ;restore W0

         gcall   cmd_unlock_out ;release lock on response stream
  /endif

         leaverest

;*******************************************************************************
;
;   C subroutine CONFIG_FAILED ()
;
;   Returns TRUE if the configuration has failed, FALSE otherwise.
;
         glbsubc config_failed

         mov     #0, w0      ;init to no failure
         skip_nflag cfgfail  ;really was no failure ?
         mov     #1, w0      ;indicate configuration failed

         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_STAT_SYS0
;
;   Send a CFGSTAT response for the current status of the main system (subsystem
;   0).
;
/if [Command cm_cfgstat] then ;create CM_CFGSTAT entry point if command defined
  /endif
         glbsub  config_stat_sys0, regf0 | regf1

         mov     #[v sys_stat_ndone], w1 ;get code for config still in progress
         skip_flag cfgdone   ;configuration completed ?
         jump    s0_stat     ;no

         mov     #[v sys_stat_fail], w1 ;get code for failure
         skip_nflag cfgfail
         jump    s0_stat

         mov     #[v sys_stat_test], w1 ;get code for in test mode
         skip_flag cfgrun
         jump    s0_stat

         mov     #[v sys_stat_normal], w1 ;get code for normal operation
s0_stat:                     ;status code is in W1

         mov     #0, w0      ;subsystem ID for main system
         mcall   send_cfgstat ;send the CFGSTAT response
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_SYS
;
;   Perform the basic main system (subsystem 0) configuration that is common to
;   MDEVs.  For systems that have more complicated main system configurations,
;   this routine is intended to be called from the main system configuration
;   routine.
;
;   When MDEBUILD is in use, then the application calls CONFIG_MDEVS instead of
;   this routine separately.  In that case, this routine is private to this
;   module, called from CONFIG_MDEVS.
;
/if mdevbuild
  /then
         locsub  config_sys, regf0
  /else
         glbsub  config_sys, regf0
  /endif

         mcall   config_ovr0_window ;give host a chance to override main sys config

         mcall   config_lock ;acquire lock on config mechanism
         clrflag cfgdone     ;init to configuration not completed yet
         clrflag cfgfail     ;init to no failure encountered during configuration
         clrflag cfgrun      ;init to system configured to test mode, not normal op

         mov     #0, w0
         mcall   config_setup ;set up for reading main system config
         bra     z, cfgsys_done ;no configuration bytes ?

         mcall   config_i8u  ;get the first config byte
         cp0     w0
         bra     z, cfgsys_done ;configure in test mode, no other subsystems ?

         setflag cfgrun      ;indicate to run in normal operating mode

cfgsys_done:
         mcall   config_unlock ;release lock on config mechanism
         leaverest

;*******************************************************************************
;
;   Subroutine CONFIG_MDEVS
;
;   Configure all the MDEVs in the system.  The SYS MDEV is configured first.
;   If it is not configured for normal operation, then the remaining MDEVs are
;   not configured.
;
;   Individual subsystems may emit CFGSTAT responses while being configured.
;   Any status code with the high bit set (128 - 255) causes the global CFGFAIL
;   flag to be set, which indicates overall configuration failure, and that
;   normal operation is not possible.
;
;   When configuration is complete, a CFGSTAT response is sent to the host
;   reporting the overall system configuration result.  This response will be
;   for the SYS subsystem (ID 0), with the status code being one of the
;   SYS_STAT_xxx constant values.
;
/if mdevbuild then
         glbsub  config_mdevs
;
;   Configure the SYS subsystem.  If sys is configured for anything other than
;   normal operation, the remaining subsystems will not be configured.  This
;   leaves them "off".
;
         mcall   config_sys  ;init config flags, configure basic system
         skip_flag cfgrun    ;system configured for normal operation ?
         jump    cmdevs_done ;no, don't configure other modules
;
;   Configure all the remaining subsystems.
;
         config_mdevs_notsys ;configure all the MDEVs except SYS
;
;   Done configuring all subsystems.
;
cmdevs_done:                 ;done calling all configuration routines
         setflag cfgdone     ;indicate system-wide configuration complete
         gcall   config_stat_sys0 ;notify host of configuration result
         leaverest
  /endif

;*******************************************************************************
;
;   Command CFGOVR0 dat
;
;   Overrides the configuration data for subsystem 0.  DAT will be the single
;   configuration byte for subsystem 0 after this command.
;
;   This command is only acted upon when the CFGOVR0 flag is set.
;
/if [Command cm_cfgovr0] then
         gcall   cmd_get8    ;get the data byte into W0
         skip_flag cfgovr0   ;this command is valid now ?
         return              ;no, nothing more to do
;
;   Set the override.
;
         mcall   config_lock ;acquire exclusive lock on the CONFIG state
         mcall   config_ovr0 ;set the override
         mcall   config_unlock ;release the lock on the CONFIG state
         return
  /endif

;*******************************************************************************
;
;   Command CFG id
;
;   Send response CFG: id n dat ... dat
;
;   Gets the configuration data for one subsystem.
;
/if [Command cm_cfg] then
;
;   Register usage:
;
;     W0  -  Data value, scratch.
;
;     W1  -  Subsystem ID.
;
;     W2  -  Number of config data bytes left to read.
;
         gcall   cmd_get8    ;get the subsystem ID
         mov     w0, w1      ;save it in W1

         mcall   config_lock ;acquire lock on the CONFIG state
         mcall   config_setup ;set up for reading the config for this subsystem
         mov     w0, w2      ;save the number of config bytes in W2

         gcall   cmd_lock_out ;acquire exclusive lock on response stream
         mov     #[v rsp_cfg], w0
         gcall   cmd_put8    ;send CFG response opcode
         mov     w1, w0
         gcall   cmd_put8    ;send config ID
         mov     w2, w0
         gcall   cmd_put16   ;send number of config bytes

cmcfg_byte:                  ;back here to send each new config byte
         cp0     w2
         bra     z, cmcfg_done ;done sending all the data bytes ?
         mcall   config_i8u  ;get this config byte into W0
         gcall   cmd_put8    ;send it
         sub     #1, w2      ;count one less config byte left to do
         jump    cmcfg_byte  ;back to do next config byte

cmcfg_done:                  ;done sending all the data bytes
         jump    config_unlock ;release the CONFIG lock, end the command
  /endif
