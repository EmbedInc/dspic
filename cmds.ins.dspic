;   ***************************************************************
;   * Copyright (C) 2010, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Command processing routines.  See the comments in QQQ_CMDS.DSPIC for the
;   interface to command routines.
;

;*******************************************************************************
;
;   Configuration constants.
;

;
;   Derived constants.
;
/var new ii integer //scratch integer
/var new tk string //scratch token

//   Make sure all the optional configuration parameters exist.  These are
//   created and set to their default values if not already existing.
//
/if [not [exist "name"]] then
  /const name string = ""
  /endif

//   Create the string constants used to customize symbol names.  These
//   constants are:
//
//     SUFF
//
//       The empty string or "_name" for adding to the middle or end of CMD_xxx
//       names.
//
//     CMD
//
//       The leading part of CMD_xxx names.  This is "cmd" when no special
//       name is used, and "cmd_<name>" when a special name is used.
//
/if [= name ""]
  /then                      ;no additional name given to our public
    /const suff string = ""
  /else                      ;public symbols have additional name
    /const suff string = [str "_" name]
  /endif

/const   cmd     string = [str "cmd" suff]
//
//   Other derived constants.
//
/const   ustat   bool = [CmdRef cm_ustat] //USTAT command in use

;*******************************************************************************
;
;   Variables.
;
;*******************
;
;   Global state.
;
.section .ram_cmds[chars suff], bss

/if ustat then
allocg   usb_fwtype          ;USB converter firmware type ID
allocg   usb_fwver           ;USB converter firmware version number
allocg   usb_fwseq           ;USB converter firmware sequence number
  /endif

;*******************
;
;   Local state.
;
.section .near_cmds, bss, near ;varibles in near RAM

alloc    flags               ;individual 1-bit flags, use FLG_xxx bit numbers
         ;
         ;   Bits in FLAGS word.  Each symbol is the number of its flag bit.
         ;
.equiv   flg_debug, 0



.section .code_cmds[chars suff], code
;*******************************************************************************
;
;   Subroutine CMDS_INIT
;
;   Initialize the hardware and software state managed by this module.
;
         glbsub  cmds_init, regf0

/if ustat then
         mov     #0, w0
         mov     w0, usb_fwtype ;init USB converter firmware info to unknown
         mov     w0, usb_fwver
         mov     w0, usb_fwseq
  /endif

         clr     flags       ;init all flag bits to off

         leaverest

;*******************************************************************************
;
;   Command PING
;
;   Sends the PONG response.
;
/if [Command cm_ping] then
         gcall   [chars cmd]_lock_out
         mov     #[v rsp_pong], w0
         gcall   [chars cmd]_put8 ;send the PONG response
         return
  /endif

;*******************************************************************************
;
;   Subroutine SEND_FWINFO
;
;   Send the FWINFO response.
;
;   This is also named CM_FWINFO, which is the default command routine name for
;   a command named "FWINFO".
;
/if [Command cm_fwinfo] then
  /endif
         glbsub  send_fwinfo, regf0

         gcall   [chars cmd]_lock_out

         mov     #[v rsp_fwinfo], w0
         gcall   [chars cmd]_put8 ;FWINFO opcode
         mov     #fwtype, w0
         gcall   [chars cmd]_put8 ;firmare type ID
         mov     #fwver, w0
         gcall   [chars cmd]_put8 ;firmware version number
         mov     #fwseq, w0
         gcall   [chars cmd]_put8 ;firmware sequence number

/if [exist "fwinfo:macro"] then
         fwinfo
  /endif

/if ustat then //additional firmware from USB device exists ?
         mov     usb_fwtype, w0
         cp0     w0
         bra     z, fwi_dusb ;USB device firmware info is unknown ?

         mov     #[v rsp_fwinfo], w0
         gcall   [chars cmd]_put8 ;FWINFO opcode
         mov     usb_fwtype, w0
         gcall   [chars cmd]_put8 ;firmare type ID
         mov     usb_fwver, w0
         gcall   [chars cmd]_put8 ;firmware version number
         mov     usb_fwseq, w0
         gcall   [chars cmd]_put8 ;firmware sequence number
fwi_dusb:                    ;done sending USB device firmware info
  /endif

         gcall   [chars cmd]_unlock_out
         leaverest

;*******************************************************************************
;
;   Command NAMESET n string
;
;   Embed device 10 command for setting the user-settable name of this device.
;
;   This version assumes a fixed name, so ignores this command other than to
;   consume the correct number of parameter bytes.
;
/if [Command cm_nameset] then
         gcall   [chars cmd]_get8 ;get the number of name characters following
         gcall   [chars cmd]_putbufn ;read the name string bytes (which are then ignored)
         return
  /endif

;*******************************************************************************
;
;   Command NAMEGET
;
;   Embed device 10 command to get the user-settable name of this device.
;
;   This version assumes a fixed name set by the DEVNAME preprocessor string
;   constant.
;
/if [Command cm_nameget] then
  /if [not [exist "devname:vcon"]] then
    /show "  The version of the NAMEGET command used in CMDS.INS.DSPIC requires"
    /show "  the DEVNAME constant to be set to the fixed name of this unit."
         .error  "devname"
    /stop
    /endif

         gcall   [chars cmd]_lock_out
         mov     #[v rsp_name], w0
         gcall   [chars cmd]_put8 ;send NAME response opcode
         mov     #[slen devname], w0
         gcall   [chars cmd]_put8 ;send length of string to follow
         cp0     w0
         skip_nz
         return              ;quit here if no string characters to send

         mov     w0, w1      ;get number of string characters left to send
         mov     #tbloffset(devname), w12 ;get string address into W13:W12
         mov     #tblpage(devname), w13
         and     #0x0F, w13
nameget_byte:                ;back here to send each new string byte
         gcall   pgbyte_read ;get this string byte into W0, advance adr
         gcall   [chars cmd]_put8 ;send the string byte
         sub     #1, w1      ;count one less byte left to do
         bra     gtu, nameget_byte ;back to do next byte

         return

devname  rawstring [v devname] ;put name string in program memory
  /endif

;*******************************************************************************
;
;   Command USTAT stat [parm ... parm]
;
;   This command is not sent by the host, but by a serial to USB converter
;   between here and the host.  The command is used to provide information about
;   the converter and the USB link.  It is part of the Embed USB device 10
;   protocol.  See the "embed10" documentation file for details.
;
/if [Command cm_ustat] then
         gcall   [chars cmd]_get8 ;get STAT into W0
         mov     w0, w1      ;save it in W1
         lsr     w0, #5, w0  ;get the 0-7 opcode into W0
         dispatch ustat_opc, 7 ;jump to specific routine for this opcode
         return              ;invalid opcode (not supposed to be possible}

ustat_opc:                   ;table of dispatch addresses for each opcode
         .pword  ustat_opc_status ;0 - STATUS
         .pword  ustat_opc_fw ;1 - FW type version sequence
         .pword  [chars cmd]_done ;2
         .pword  [chars cmd]_done ;3
         .pword  [chars cmd]_done ;4
         .pword  [chars cmd]_done ;5
         .pword  [chars cmd]_done ;6
         .pword  [chars cmd]_done ;7
;
;   USTAT STATUS
;
ustat_opc_status:
         btss    w0, #0
         setflag usb_host
         btsc    w0, #0
         clrflag usb_host

         btss    w0, #1
         setflag usb_app
         btsc    w0, #1
         clrflag usb_app
         return
;
;   USTAT FW type version sequence
;
ustat_opc_fw:
         gcall   [chars cmd]_get8 ;get type ID
         mov     w0, usb_fwtype
         gcall   [chars cmd]_get8 ;get version number
         mov     w0, usb_fwver
         gcall   [chars cmd]_get8 ;get sequence number
         mov     w0, usb_fwseq
         return
  /endif

;*******************************************************************************
;
;   Command CANSD nid dat ... dat
;
;   Send CAN standard data frame.  The frame ID is in NID<10:0> and the number
;   of data bytes in NID<14:11>.
;
/if [Command cm_cansd] then
;
;   Read the whole command.
;
         gcall   cmd_get16   ;get NID into W0
         lsr     w0, #11, w1 ;extract the number of data bytes into W1
         and     #15, w1
         mov     #0x7FF, w2  ;extract frame ID into W2
         and     w0, w2, w2

         mov     w1, w0      ;read the data bytes into the scratch buffer
         gcall   cmd_putbufn
;
;   Send the CAN frame.  Register contents:
;
;     W1  -  Number of data bytes.
;
;     W2  -  CAN frame ID.
;
         mov     #0b00, w0   ;indicate standard data frame
         gcall   can_send_init ;set up for sending a CAN frame

         mov     w2, w0      ;set the frame ID
         gcall   can_send_id

         mov     #cmdbuf, w2 ;init pointer to first data byte
sends_byte:                  ;back here each new data byte
         cp0     w1
         bra     z, sends_dbytes ;done all data bytes ?
         mov.b   [w2++], w0  ;get this data byte
         gcall   can_send_dat ;write it to the CAN frame
         sub     #1, w1      ;count one less byte left to do
         jump    sends_byte  ;back to do next byte
sends_dbytes:                ;done writing all data bytes

         gjump   can_send    ;send frame, release lock, return from command
  /endif

;*******************************************************************************
;
;   Command CANSR id16
;
;   Send CAN standard remote request frame.
;
/if [Command cm_cansr] then
         gcall   cmd_get16   ;get the frame ID into W1
         mov     w0, w1

         mov     #0b10, w0   ;indicate standard remote request frame
         gcall   can_send_init ;set up for sending a CAN frame

         mov     w1, w0      ;set the frame ID
         gcall   can_send_id

         gjump   can_send    ;send frame, release lock, return from command
  /endif

;*******************************************************************************
;
;   Command CANED id32 ndat dat ... dat
;
;   Send CAN extended data frame.
;
/if [Command cm_caned] then
         gcall   cmd_get32   ;get the frame ID into W1:W0
         mov.d   w0, w2      ;save it in W3:W2
         gcall   cmd_get8    ;get the number of data bytes
         mov     w0, w4      ;save it in W4
         gcall   cmd_putbufn ;read the data bytes into the scratch buffer
;
;   Send the CAN frame.  Register contents:
;
;     W3:W2  -  CAN frame ID.
;
;     W4  -  Number of data bytes.
;
         mov     #0b01, w0   ;indicate extended data frame
         gcall   can_send_init ;set up for sending a CAN frame

         mov.d   w2, w0      ;set the frame ID
         gcall   can_send_id

         mov     #cmdbuf, w2 ;init pointer to first data byte
sende_byte:                  ;back here each new data byte
         cp0     w4
         bra     z, sende_dbytes ;done all data bytes ?
         mov.b   [w2++], w0  ;get this data byte
         gcall   can_send_dat ;write it to the CAN frame
         sub     #1, w4      ;count one less byte left to do
         jump    sende_byte  ;back to do next byte
sende_dbytes:                ;done writing all data bytes

         gjump   can_send    ;send frame, release lock, return from command
  /endif

;*******************************************************************************
;
;   Command CANER id32
;
;   Send CAN extended remote request frame.
;
/if [Command cm_caner] then
         gcall   cmd_get32   ;get the frame ID into W1:W0
         mov     w0, w2      ;save it in W1:W2

         mov     #0b11, w0   ;indicate extended remote request frame
         gcall   can_send_init ;set up for sending a CAN frame

         mov     w2, w0      ;set the frame ID
         gcall   can_send_id

         gjump   can_send    ;send frame, release lock, return from command
  /endif

;*******************************************************************************
;
;   Command DEBUG onoff
;
;   Enable/disable debug responses with IDs 128-255.  ONOFF values:
;
;     0 - disable
;
;     1 - enable
;
;     The remaining values are reserved for future use and disable the debug
;     responses for now.
;
/if [Command cm_debug] then
         gcall   cmd_get8    ;get ONOFF into W0
         bclr    flags, #flg_debug ;init to debug off
         cp      w0, #1
         skip_nz             ;really is off ?
         bset    flags, #flg_debug ;no, set to on
         return
  /endif

;*******************************************************************************
;
;   Subroutine DEBUG0
;
;   Send DEBUG0 response: id
;
;   The response is always sent for IDs 0-127.  The response is only sent for
;   IDs 128-255 when debug responses are globally enabled, as can be done with
;   the DEBUG command.
;
;   ID is passed in the low 8 bits of W0.
;
/if [exist "rsp_debug0:const"] then
         glbsubd debug0, regf0 | regf3

         btss    w0, #7      ;debug responses must be enabled ?
         jump    dbg0_send   ;no
         btss    flags, #flg_debug ;enabled ?
         jump    dbg0_leave  ;no

dbg0_send:                   ;send the response
         gcall   cmd_lock_out ;acquire lock on response stream

         mov     w0, w3      ;temp save ID
         mov     #[v rsp_debug0], w0 ;send response opcode
         gcall   cmd_put8
         mov     w3, w0      ;send ID
         gcall   cmd_put8

         gcall   cmd_unlock_out ;release lock on response stream

dbg0_leave:
         leaverest
  /endif

;*******************************************************************************
;
;   Subroutine DEBUG1
;
;   Send DEBUG1 response: id dat
;
;   DAT is 8 bits.  The response is always sent for IDs 0-127.  The response is
;   only sent for IDs 128-255 when debug responses are globally enabled, as can
;   be done with the DEBUG command.
;
;   ID is passed in the low 8 bits of W0.  DAT is in the low 8 bits of W1.
;
/if [exist "rsp_debug1:const"] then
         glbsubc debug1s
         glbsubc debug1u

         glbsub  debug1, regf0 | regf3

         btss    w0, #7      ;debug responses must be enabled ?
         jump    dbg1_send   ;no
         btss    flags, #flg_debug ;enabled ?
         jump    dbg1_leave  ;no

dbg1_send:                   ;send the response
         gcall   cmd_lock_out ;acquire lock on response stream

         mov     w0, w3      ;temp save ID
         mov     #[v rsp_debug1], w0 ;send response opcode
         gcall   cmd_put8
         mov     w3, w0      ;send ID
         gcall   cmd_put8
         mov     w1, w0      ;send DAT
         gcall   cmd_put8

         gcall   cmd_unlock_out ;release lock on response stream

dbg1_leave:
         leaverest
  /endif

;*******************************************************************************
;
;   Subroutine DEBUG2
;
;   Send DEBUG2 response: id dat
;
;   DAT is 16 bits.  The response is always sent for IDs 0-127.  The response is
;   only sent for IDs 128-255 when debug responses are globally enabled, as can
;   be done with the DEBUG command.
;
;   ID is passed in the low 8 bits of W0.  DAT is in W1.
;
/if [exist "rsp_debug2:const"] then
         glbsubc debug2s
         glbsubc debug2u

         glbsub  debug2, regf0 | regf3

         btss    w0, #7      ;debug responses must be enabled ?
         jump    dgb2_send   ;no
         btss    flags, #flg_debug ;enabled ?
         jump    dgb2_leave  ;no

dgb2_send:                   ;send the response
         gcall   cmd_lock_out ;acquire lock on response stream

         mov     w0, w3      ;temp save ID
         mov     #[v rsp_debug2], w0 ;send response opcode
         gcall   cmd_put8
         mov     w3, w0      ;send ID
         gcall   cmd_put8
         mov     w1, w0      ;send DAT
         gcall   cmd_put16

         gcall   cmd_unlock_out ;release lock on response stream

dgb2_leave:
         leaverest
  /endif

;*******************************************************************************
;
;   Subroutine DEBUG3
;
;   Send DEBUG3 response: id dat
;
;   DAT is 24 bits.  The response is always sent for IDs 0-127.  The response is
;   only sent for IDs 128-255 when debug responses are globally enabled, as can
;   be done with the DEBUG command.
;
;   ID is passed in the low 8 bits of W0.  DAT is in the low 24 bits of W2:W1.
;
/if [exist "rsp_debug3:const"] then
         glbsubc debug3s
         glbsubc debug3u
         mov     w2, w1
         mov     w3, w2

         glbsub  debug3, regf0 | regf1 | regf3

         btss    w0, #7      ;debug responses must be enabled ?
         jump    dbg3_send   ;no
         btss    flags, #flg_debug ;enabled ?
         jump    dbg3_leave  ;no

dbg3_send:                   ;send the response
         gcall   cmd_lock_out ;acquire lock on response stream

         mov     w0, w3      ;temp save ID
         mov     #[v rsp_debug3], w0 ;send response opcode
         gcall   cmd_put8
         mov     w3, w0      ;send ID
         gcall   cmd_put8
         mov     w1, w0      ;send DAT
         mov     w2, w1
         gcall   cmd_put24

         gcall   cmd_unlock_out ;release lock on response stream

dbg3_leave:
         leaverest
  /endif

;*******************************************************************************
;
;   Subroutine DEBUG4
;
;   Send DEBUG4 response: id dat
;
;   DAT is 32 bits.  The response is always sent for IDs 0-127.  The response is
;   only sent for IDs 128-255 when debug responses are globally enabled, as can
;   be done with the DEBUG command.
;
;   ID is passed in the low 8 bits of W0.  DAT is in W2:W1.
;
/if [exist "rsp_debug4:const"] then
         glbsubc debug4s
         glbsubc debug4u
         mov     w2, w1
         mov     w3, w2

         glbsub  debug4, regf0 | regf1 | regf3

         btss    w0, #7      ;debug responses must be enabled ?
         jump    dbg4_send   ;no
         btss    flags, #flg_debug ;enabled ?
         jump    dbg4_leave  ;no

dbg4_send:                   ;send the response
         gcall   cmd_lock_out ;acquire lock on response stream

         mov     w0, w3      ;temp save ID
         mov     #[v rsp_debug4], w0 ;send response opcode
         gcall   cmd_put8
         mov     w3, w0      ;send ID
         gcall   cmd_put8
         mov     w1, w0      ;send DAT
         mov     w2, w1
         gcall   cmd_put32

         gcall   cmd_unlock_out ;release lock on response stream

dbg4_leave:
         leaverest
  /endif

;*******************************************************************************
;
;   Command STOP
;
;   Stop all but the first STOP_LEAVE tasks that were created.  Send the STOP
;   response when done.
;
/if [Command cm_stop] then

.section .ram_cmds[chars suff], bss
allocg   stop_leave          ;number of tasks for STOP command to leave
.section .code_cmds[chars suff], code

         mov     stop_leave, w0 ;get number of tasks to leave
         gcall   task_prune  ;stop all but the first STOP_LEAVE tasks

         gcall   [chars cmd]_lock_out
         mov     #[v rsp_stop], w0
         gcall   [chars cmd]_put8 ;send the STOP response opcode
         gcall   task_n_curr ;get number of tasks still running
         gcall   [chars cmd]_put8 ;send NTASKS parameter
         return
  /endif
