;   ***************************************************************
;   * Copyright (C) 2009, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Main event loop.
;
/include "qq2.ins.dspic"

;*******************************************************************************
;
;   Configuration constants.
;
/const   tskfbits integer = 7 ;number of bits to shift per task rate filter pole
/const   tskfn   integer = 3 ;number of task rate filter poles
;
;   Derived constants.
;

;*******************************************************************************
;
;   Variables.
;
;*******************
;
;   Global state.
;
.section .ram_main, bss

;*******************
;
;   Local state.
;
alloc    slowadr, 4          ;slow task restart address
alloc    slow0               ;register save area for slow task
alloc    slow1
alloc    slow2
alloc    slow3

alloc    tskcnt              ;number of task loops since last 1 ms tick
;
;   Filtered task loop rate.  The number of loops per ms are counted in a 16 bit
;   word, and shifted left 5 bits.  That becomes the high word of the new value
;   filter.  Each of the filter poles has the same format.
;
alloc    tskfilt, [* tskfn 4] ;all the filter poles sequentially in memory
;
;   Local state in near memory.
;
.section .near_main, bss, near ;varibles in near RAM

alloc    flags               ;individual 1-bit flags, use FLG_xxx bit numbers
         ;
         ;   Bits in FLAGS word.  Each symbol is the number of its flag bit.
         ;
.equiv   flg_xxx, 0


.section .code_main, code
;*******************************************************************************
;
;   Local subroutine TASK_FILTER
;
;   This routine is called once for each 1 ms clock tick.  The number of task
;   loops in the last ms is filtered into the task rate filter.  The task loops
;   counter is reset to start the next 1 ms counting period.
;
;   W0-W14 may be trashed.
;
         locsub  task_filter

         mov     tskcnt, w1  ;get the number of task loops in the last ms
         mov     #0, w0
         mov     w0, tskcnt  ;clear the counter to be ready for the next ms
         sl      w1, #5, w1  ;make count in filter format in W1:W0
;
;   Loop thru the filter poles to update them to the new value.  Register usage:
;
;     W1:W0  -  New value to update this filter pole with.
;
;     W2  -  Temp scratch per iteration.
;
;     W3  -
;
;     W4  -  Pointer to filter word to update.
;
;     W5  -  Number of filter poles left to update.
;
         mov     #tskfilt, w4 ;init pointer to filter state to update
         mov     #[v tskfn], w5 ;init number of filter poles left to update

filt_pole:                   ;back here each new filter pole
         sub     w0, [w4++], w0 ;NEW - FILT --> W1:W0
         subb    w1, [w4--], w1

         lsr     w0, #[v tskfbits], w0 ;shift the result in W1:W0 right
         sl      w1, #[- 16 tskfbits], w2
         ior     w0, w2, w0
         asr     w1, #[v tskfbits], w1

         add     w0, [w4++], w0 ;add FILT to make final result in W1:W0
         addc    w1, [w4--], w1

         mov     w0, [w4++]  ;write result to the filter state, advance pointer
         mov     w1, [w4++]

         sub     #1, w5      ;count one less filter pole left to update
         bra     nz, filt_pole ;back to update the next filter pole

         leaverest

;*******************************************************************************
;
;   Command TASKRATE
;
;   Sends the response TASKRATE rate
;
;   RATE is the high 24 bits of the final filter pole.
;
/if [Command cm_taskrate] then
         gcall   cmd_lock_out ;acquire lock on response stream

         mov     #[v rsp_taskrate], w0 ;send the response opcode
         gcall   cmd_put8

         mov     tskfilt+[+ [* [- tskfn 1] 4] 2], w0 ;get final filter high word
         swap    w0
         gcall   cmd_put8    ;send high byte
         swap    w0
         gcall   cmd_put8    ;send middle byte
         mov     tskfilt+[* [- tskfn 1] 4], w0 ;get final filter low word
         swap    w0
         gjump   cmd_put8    ;send low byte, return from command routine
  /endif

;*******************************************************************************
;
;   Main operating loop entry point.  MAIN is jumped to from the INIT module
;   after system level initialization is complete.
;
         glbent  main        ;jumps here from INIT after system initialization
;
;   Initialize state managed by this module before entering the main operating
;   loop.
;
         clr     flags       ;init all local flags to off
         ;
         ;   Init slow task state.
         ;
         mov     #tbloffset(slow_start), w0 ;init slow task restart address
         mov     w0, slowadr+0
         mov     #tblpage(slow_start), w0
         and     #0x7F, w0
         mov     w0, slowadr+2
         ;
         ;   Init task rate state.
         ;
         mov     #0, w0      ;init task loops counter
         mov     w0, tskcnt

         mov     #[* tskfn 2], w1 ;init number of words left to clear
         mov     #tskfilt, w2 ;init pointer to next word to clear
ini_tskf:                    ;back here to init each new task rate filter word
         mov     w0, [w2++]  ;clear this word, advance pointer
         sub     #1, w1      ;count one less word left to clear
         bra     nz, ini_tskf ;back to init next filter word

;********************
;
;   Main loop.
;
loop_main:
         gcall   task_yield  ;give all other tasks a chance to run

         mov     tskcnt, w0  ;count one more loop thru all tasks
         add     #1, w0
         mov     w0, tskcnt
;
;   Check for we are to reconfigure ourselves.
;
         skip_flag reconfig  ;need to reconfigure ?
         jump    n_reconfig  ;no, skip this section

         jump    reconfig    ;go do the reconfigure

n_reconfig:                  ;skip here to not reconfigure the firmware
;
;   Handle new 1 ms clock tick.
;
l_tick1ms:                   ;back here to check for another 1 ms tick
         cp0     ev_1ms
         bra     z, d_tick1ms ;done with all 1 ms ticks ?
         dec     ev_1ms      ;clear the event condition
         ;
         ;   New 1 ms clock tick.
         ;
         mcall   task_filter ;update filtered task rate state
         jump    l_tick1ms   ;back to check for another 1 ms tick

d_tick1ms:                   ;done with 1 ms tick processing
;
;   Handle new 10 ms clock tick.
;
         cp0     ev_10ms
         bra     z, d_tick10ms ;done with all 10 ms ticks ?
         dec     ev_10ms     ;clear the event condition
         ;
         ;   New 10 ms clock tick.
         ;

d_tick10ms:
;
;   Handle new 100 ms clock tick.
;
         cp0     ev_100ms
         bra     z, d_tick100ms ;done with all 100 ms ticks ?
         dec     ev_100ms    ;clear the event condition
         ;
         ;   New 100 ms clock tick.
         ;

d_tick100ms:
;
;   Handle new 1 s clock tick.
;
         cp0     ev_1s
         bra     z, d_tick1s ;done with all 1 s ticks ?
         dec     ev_1s       ;clear the event condition
         ;
         ;   New 1 s clock tick.
         ;

d_tick1s:

;*******************************************************************************
;
;   There were no events to process.  The "slow" task will be run for one
;   iteration before restarting the main event loop.
;
;   There are several actions that need to be performed occasionally that are
;   appropriate to do whenever the event loop has nothing else to do.  Each
;   individual action is fast enough, but all together might be more than what
;   is appropriate for a single event loop iteration.
;
;   This section implements a task that cycles thru all the "slow" actions that
;   need to be performed occasionally, releasing the processor between each one.
;   This effectively means that one slow action will be performed every time we
;   get here, and that the slow events are cycled thru over multiple times here.
;
;   The task restart address is in SLOWADR, which is updated by the task before
;   it ends each iteration.
;
         mov     slowadr+0, w0 ;push the slow task restart address onto the stack
         push    w0
         mov     slowadr+2, w0
         push    w0

         mov     slow0, w0   ;restore slow task register preserved by YIELD
         mov     slow1, w1
         mov     slow2, w2
         mov     slow3, w3

         return              ;jump to the slow task restart point

;*****************************
;
;   Local subroutine YIELD
;
;   This routine is called from the slow task to release the processor.  This
;   causes the main event loop to be restarted.  To the slow task, this looks
;   like a routine that returns some time later, trashing some registers.
;
;   WARNING: W4 - W14 are trashed.
;
         locsub  yield

         mov     w0, slow0   ;save registers preserved by this routine
         mov     w1, slow1
         mov     w2, slow2
         mov     w3, slow3

         pop     w0          ;get high word of restart address
         and     #0x7F, w0   ;mask in only the address bits
         mov     w0, slowadr+2 ;save it
         pop     w0          ;get low word of restart address
         mov     w0, slowadr+0 ;save it

         jump    loop_main   ;back to the start of the event loop

;*****************************
;
;   Slow task.
;
;   This task is run for one time slice each time the main event loop gets to
;   the bottom, meaning no large events were handled.
;
;   Only registers W0-W3 are preserved between time slices (across calls to
;   YIELD).
;
slow_start:                  ;task initial start point

slow_loop:                   ;back here to do everything again
         gcall   ledstat_update ;update the "Status" LED
         mcall   yield

         jump    slow_loop   ;back to do it all again
.end
