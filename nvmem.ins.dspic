;   High level management of the non-volatile memory.  All non-volatile memory
;   accesses are thru the routines in the NVOLB module.
;

;*******************************************************************************
;
;   Configuration constants.
;
/const   crcmask integer = 16#04C11DB7 ;32 bit CRC XOR mask (polynomial)
/const   crcinit integer = 16#80000000 ;value to init checksum accumulator to
/const   crcsize integer = 4 ;byte size of the checksum
;
;   Derived constants.
;
/block
  /var local ii integer
  /var local r real
  /var local s string

.equiv   xmaskl, [and crcmask 16#FFFF] ;low word of CRC XOR mask
.equiv   xmaskh, [and [shiftr crcmask 16] 16#FFFF] ;high word of CRC XOR mask

  /endblock

;*******************************************************************************
;
;   Variables.
;
;*******************
;
;   Global state.
;
.section .ram_nvmem, bss


;*******************
;
;   Local state.
;


.section .code_nvmem, code
;*******************************************************************************
;
;   Subroutine NVMEM_LAST
;
;   Return the address of the last application-usable byte in the non-volatile
;   memory.  Some bytes are reserved at the end of the memory for use by the
;   system.  The address is returned in W1:W0.
;
         glbsubd nvmem_last

         gcall   nvol_size   ;get first address past end into W1:W0
         sub     #[+ crcsize 1], w0 ;skip over the reserved bytes at end
         subb    #0, w1

         leaverest

;*******************************************************************************
;
;   Local subroutine CKSUM_INIT
;
;   Initialize the checksum accumulator W4:W3.
;
         locsub  cksum_init

         load32  w3, [v crcinit]

         leaverest

;*******************************************************************************
;
;   Local subroutine CKSUM_BYTE
;
;   Add the byte in the low bits of W0 to the checksum in W4:W3.
;
         locsub  cksum_byte, regf0 | regf5 | regf6

         sl      w0, #8, w0  ;move the first bit into position
         mov     #8, w5      ;init number of bits left to do
cks_bit:                     ;back here to add each new bit to the CRC checksum
         rlc     w0, w0      ;move this bit into C
         rlc     w3, w3      ;shift it into the CRC accumulator
         rlc     w4, w4
         btss    Sr, #C      ;shifted-out bit was 1 ?
         jump    cks_nxor    ;was 0, skip the XOR
         mov     #xmaskl, w6 ;apply the XOR mask to the CRC accumulator
         xor     w3, w6, w3
         mov     #xmaskh, w6
         xor     w4, w6, w4
cks_nxor:                    ;done with XOR
         sub     #1, w5      ;count one less bit left to do
         bra     nz, cks_bit ;back to do the next bit

         leaverest

;*******************************************************************************
;
;   Local subroutine CKSUM_NBYTES
;
;   Compute the checksum on the first W6:W5 bytes of the non-volatile memory.
;   This value must not be 0.  The resulting checksum will be left in W4:W3.
;   W2:W1 will be left with the next non-volatile memory address after the last
;   byte included in the checksum.  The low byte of W0 will contain the AND of
;   all the bytes.  The high byte of W0 will be cleared.
;
;   Warning: W5, W6 are trashed.
;
;   Registers on entry:
;
;     W6:W5  -  Number of bytes to checksum, starting at the start of nv mem.
;
;   Registers on exit:
;
;     W0  -  Logical AND of all bytes included in the checksum.
;
;     W2:W1  -  Next nv mem address after the last byte checksummed.
;
;     W4:W3  -  Computed checksum.
;
;     W6:W5  -  Trashed.
;
         locsub  cksum_nbytes, regf7
;
;   Register usage:
;
;     W0  -  Scratch.  Current byte value.
;
;     W2:W1  -  Non-volatile memory byte address.
;
;     W4:W3  -  Checksum accumulator.
;
;     W6:W5  -  Number of bytes left to accumulate into the checksum.
;
;     W7  -  AND of all data bytes.
;
         mcall   cksum_init  ;init the checksum accumulator in W4:W3.
         load32  w1, 0       ;init address of next byte in W2:W1
         mov     #0xFF, w7   ;init AND of all data bytes

ckp_byte:                    ;back here each new byte to add to the checksum
         gcall   nvol_read   ;read this byte, advance address to next
         and     w7, w0, w7  ;update AND of all data bytes
         mcall   cksum_byte  ;add this byte to the checksum
         sub     #1, w5      ;count one less byte left to do
         subb    #0, w6
         bra     nz, ckp_byte ;back to do the next byte

         mov     w7, w0      ;return final AND of all the data bytes
         leaverest

;*******************************************************************************
;
;   Subroutine NVMEM_CHECK
;
;   Check the non-volatile memory checksum.  Flags NVVALID and NVERASED are set
;   according to the contents of the memory.  Flag NVWRCKS is reset.
;
         glbsub  nvmem_check, regf0 | regf1 | regf3 | regf4 | regf5 | regf6

         gcall   nvol_size   ;get the total number of nvol bytes into W6:W5
         mov     w0, w5
         mov     w1, w6
         mcall   cksum_nbytes ;compute checksum on entire nvol memory
;
;   Current register contents:
;
;     W0  -  AND of all nvol bytes.
;
;     W1  -  Scratch
;
;     W4:W3  -  Computed checksum on entire nvol memory.
;
;     W5  -  Scratch
;
;     W6  -  Scratch
;
         ;
         ;   Set the NVERASED flag according to the contents of the memory.
         ;
         com.b   w0, w0      ;set Z if all bytes were FFh
         skip_nz
         setflag nverased
         skip_z
         clrflag nverased
         ;
         ;   Set the NVVALID flag according to whether the checksum test
         ;   passed.  The checksum is set up so that checksumming the entire
         ;   memory should result in 0.
         ;
         ior     w3, w4, w3  ;set Z for checksum test passed
         skip_nz
         setflag nvvalid
         skip_z
         clrflag nvvalid
         ;
         ;   Reset the NVWRCKS flag since the checksum status is now up to date
         ;   with the current contents of the memory.
         ;
         clrflag nvwrcks     ;no write since last checksum check

         leaverest

;*******************************************************************************
;
;   Subroutine NVMEM_READY
;
;   Set up the non-volatile memory ready for app use.
;
;   The checksum is checked.  If it checks, the flags are set accordingly and
;   nothing more is done.  If the checksum test fails, then the memory is erased
;   and the flags set accordingly.
;
;   After this call, applications should check the NVVALID flag.  If set, they
;   can read configuration data from the non-volatile memory.  If cleared,
;   default data should be written to the non-volatile memory.
;
         glbsub  nvmem_ready

         mcall   nvmem_check ;check the data and checksum, set flags accordingly
         skip_nflag nvvalid  ;the data is corrupt ?
         jump    rdy_leave   ;the data is intact, nothing more to do
;
;   The non-volatile memory is corrupt.
;
         mcall   nvmem_erase ;erase the whole memory, if not already erased

rdy_leave:
         leaverest

;*******************************************************************************
;
;   Subroutine NVMEM_CKSUM_SET
;
;   Set the non-volatile memory checksum for the current contents of the memory.
;   Note that the last CRCSIZE bytes of the memory are reserved for the
;   checksum.  The previous contents of these checksum bytes is irrelevant.
;
;   This routine does not return until the checksum is physically written to the
;   non-volatile memory.
;
         glbsubd nvmem_cksum_set, regf0 | regf1 | regf2 | regf3 | regf4 | regf5 | regf6
;
;   Compute the checksum on all the payload bytes.  This is all the bytes except
;   the checksum itself.  The checksum will be left in W4:W3, and W2:W1 will
;   be left the first address after the last checksummed byte.
;
         gcall   nvol_size   ;get size of whole nvol memory into W1:W0
         sub     w0, #[v crcsize], w5 ;make bytes to checksum over in W6:W5
         subb    w1, #0, w6
         mcall   cksum_nbytes ;compute the checksum on just the payload bytes
;
;   Add 0 bytes into the checksum for each checksum byte.  The CRC checksum we
;   use has the special property that if you do this, the resulting CRC
;   checksum on all bytes (payload and checksum) is 0 when the checksum matches
;   the payload.
;
         mov     #0, w0      ;get the byte value to add to the checksum
/loop n crcsize              ;once for each checksum byte
         mcall   cksum_byte
  /endloop
;
;   Write the resulting checksum to the non-volatile memory.  The start address
;   of where to write the checksum is already in W2:W1.  The checksum is in
;   W4:W3.  It must be written in high to low byte order.
;
;   Register usage in this section:
;
;     W0   -   Byte value.
;
;     W2:W1  -  Non-volatile memory byte address.
;
;     W4:W3  -  The checksum.  Will be accessed indirectly via W5.
;
;     W5  -  Pointer to next checksum byte to write.
;
;     W6  -  Number of bytes left to write
;
         mov     #9, w5      ;init pointer to first byte of checksum to write
         mov     #[v crcsize], w6 ;init number of bytes left to write
nvs_byte:                    ;back here to write each new byte
         mov.b   [w5--], w0  ;get this byte, advance pointer to next
         gcall   nvol_write  ;write it, advance the write address
         sub     #1, w6      ;count one less byte left to write
         bra     nz, nvs_byte ;back to do next byte

         gcall   nvol_flush  ;force any cached data to be physically written

         leaverest

;*******************************************************************************
;
;   Subroutine NVMEM_ERASE
;
;   Erase the non-volatile memory unless it is already known to be erased.
;   Other state is updated accordingly.
;
         glbsub  nvmem_erase

         skip_nflag nverased ;not already erased
         jump    er_is       ;is already erased, skip this section

         gcall   nvol_erase  ;erase the memory
         setflag nverased    ;indicate the memory is erased
         clrflag nvvalid     ;fully erased memory has invalid checksum
         clrflag nvwrcks     ;nothing written since checksum validity determined
er_is:                       ;skip to here if memory already erased

         leaverest

;*******************************************************************************
;
;   Command NVMEM_APPSIZE
;
;   Send the NVMEM_APPSIZE response, which indicates the size of the
;   non-volatile memory available to the application.  The checksum at the end
;   of the memory is reserved by the system, and is not available for the
;   application to store arbitrary data in.
;
/if [Command cm_nvmem_appsize] then
         gcall   cmd_lock_out ;acquire lock on the response stream
         mov     #[v rsp_nvmem_appsize], w0
         gcall   cmd_put8    ;send NVMEM_APPSIZE response opcode

         gcall   nvol_size   ;get size of whole non-volatile memory into W1:W0
         sub     #[v crcsize], w0 ;subtract the reserved area size at the end
         subb    #0, w1
         gjump   cmd_put32   ;send app-usable size, end the command
  /endif

;*******************************************************************************
;
;   Command NVMEM_STAT
;
;   Send the NVMEM_STAT response, which provides the non-volatile memory
;   checksum and checksum status.
;
;   This response also needs to be sent at other times.  This code is therefore
;   implemented as the full subroutine SEND_NVMEM_STAT.  The command routine
;   entry point CM_NVMEM_STAT is a alias for the subroutine entry point
;   SEND_CKSUM.
;
/if [Command cm_nvmem_stat] then
         glbsub  send_nvmem_stat, regf0 | regf1 | regf2 | regf3

         gcall   nvol_size   ;get the non-volatile memory size into W2:W1
         mov     w1, w2
         mov     w0, w1
         sub     #[v crcsize], w1 ;make start address of the checksum
         subb    #0, w2

         gcall   cmd_lock_out ;acquire lock on response stream
         mov     #[v rsp_nvmem_stat], w0
         gcall   cmd_put8    ;send NVMEM_STAT response opcode

         mov     #[v crcsize], w3 ;init number of checksum bytes left to send
sndck_byte:                  ;back here to send each new checksum byte
         gcall   nvol_read   ;get this byte into W0, advance adr in W2:W1
         gcall   cmd_put8    ;send this checksum byte
         sub     #1, w3      ;count one less byte left to send
         bra     nz, sndck_byte ;back to send next checksum byte

         mov     #0, w0      ;init to checksum status unknown
         skip_nflag nvwrcks  ;no write since last checksum test ?
         jump    sndck_stat  ;there was a write, status in W0 all set
         mov     #1, w0      ;get status for checksum test failed
         skip_nflag nvvalid  ;really did fail ?
         mov     #2, w0      ;no, get status for checksum test passed
sndck_stat:                  ;status byte in W0 is all set
         gcall   cmd_put8    ;send STATUS byte

         gcall   cmd_unlock_out ;release lock on response stream
         leaverest
  /endif

;*******************************************************************************
;
;   Command NVMEM_CHECK
;
;   Perform checksum test.  The NVMEM_STAT response will be sent with the
;   result.
;
/if [Command cm_nvmem_check] then
         mcall   nvmem_check ;do the checksum test
         jump    send_nvmem_stat ;send the NVMEM_STAT response, end the command
  /endif

;*******************************************************************************
;
;   Command NVMEM_CKSET
;
;   Set the non-volatile memory checksum according to its current content.  The
;   NVMEM_STAT response will be sent as confirmation.
;
/if [Command cm_nvmem_ckset] then
         mcall   nvmem_cksum_set ;compute and set the checksum
         mcall   nvmem_check ;check the result
         jump    send_nvmem_stat ;send the NVMEM_STAT response, end the command
  /endif

;*******************************************************************************
;
;   Command NVMEM_USED
;
;   Get the amount of non-volatile memory that appears to be in use by the
;   application.  Contiguous bytes set to the erased value at the end of the
;   application-accessible memory are considered unused.  The NVMEM_USED
;   response is sent, which indicates the number of "used" bytes.
;
/if [Command cm_nvmem_used] then
         gcall   nvmem_last  ;get last app-usable nv mem address into W1:W0
         mov     w1, w2      ;move it to W2:W1 for use by the NVOL_xxx routines
         mov     w0, w1
;
;   Scan backwards from the last usable address (in W2:W1) looking for the first
;   byte that is not in the erased state.
;
nvu_byte:                    ;back here to check each new byte
         gcall   nvol_read   ;get the byte at address W2:W1 into W0
         com.b   w0, w0      ;set Z if the erased value
         bra     nz, nvu_send ;found the last-used byte, W2:W1 is number of used ?
         sub     w1, #1, w0  ;set Z according to the address just checked
         subb    w2, #0, w0
         bra     z, nvu_nfound ;no used byte found at all ?
         ;
         ;   Advance to the next address.  Since we are scanning backwards thru
         ;   memory, and the NVOL_READ routine increments the address after the
         ;   read, the address in W2:W1 must be decremented by 2.
         ;
         sub     #2, w1      ;make address of next byte to check
         subb    #0, w2
         jump    nvu_byte    ;back to check the byte at this new address
;
;   All bytes were read, and all of them were in the erased state.
;
nvu_nfound:
         load32  w1, 0       ;the number of used bytes is 0
;
;   The value to send with the NVMEM_USED response is in W2:W1.
;
nvu_send:
         gcall   cmd_lock_out ;acquire lock on the response stream
         mov     #[v rsp_nvmem_used], w0
         gcall   cmd_put8    ;send NVMEM_USED response opcode
         mov     w1, w0      ;move the 32 bit value to send into W1:W0
         mov     w2, w1
         gjump   cmd_put32   ;send it, end the command
  /endif
