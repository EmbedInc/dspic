;   ***************************************************************
;   * Copyright (C) 2010, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   Cooperative task manager.  The exported resources are:
;
;     TASK_INIT
;
;       Initializes the state.  Must be first call into this module.
;
;     TASK_NEW
;
;       Create a new task.  Call parameters:
;
;         W13  -  Size of the new task stack in bytes, must be even.
;
;         W14  -  Start address of the task for the new stack.
;
;       The new task starts immediately after the CALL TASK_NEW instruction.  It
;       is intended that a GOTO be put there.  The call returns 2 instruction
;       words after the call, skipping over the GOTO intended to be immediately
;       after the call.
;
;       Example call:
;
;         mov    #<stack size>, w13
;         move   #<stack>, w14
;         call   task_new
;         goto   <new task start point>
;         ...             ;existing task continues here
;
;       The original task continues running until TASK_YIELD is called.
;
;     TASK_YIELD
;
;       Gives all other tasks a chance to run.  Registers listed in TSKSAVE are
;       preserved.
;
;     TASK_YIELD_SAVE
;
;       Like TASK_YIELD, except that all registers are preserved.
;
;     TASK_EXIT
;
;       Entry point to end the current task.  The task state slot becomes
;       unused, and may be re-used by a future call to TASK_NEW.  This entry
;       point can be CALLed, but will not return.  The stack state is
;       irrelevant on entry to TASK_EXIT.  The processor is reset on attempt
;       to exit the only task.
;
;     TASK_KILL
;
;       Kill the task with the ID in W0.  Nothing is done is the ID matches no
;       task.  If the current task is killed, this routine will not return.  The
;       processor is reset on attempt to kill the only task.
;
;     TASK_N_MAX
;
;       Returns the maximum possible number of tasks in W0.
;
;     TASK_N_CURR
;
;       Returns the total number of current tasks in W0.
;
;     TASK_NID
;
;       Returns the ID for the 0-N task slot identified in W0, where N is the
;       value returned by TASK_N minus 1.  The task ID is returned in W0.
;
;       For valid task slot numbers, the Z flag is cleared.  For out of range
;       task slot numbers, the Z flag is set and the W0 value is undefined.
;
;     TASK_EXIST
;
;       Determine whether the task with ID in W0 exists.  Z is cleared if the
;       task exists and set otherwise.
;
;   The tasks are:
;
;     0  -  Original task.  This runs the main event loop after initialization.
;
;     1  -  *** fill in here ***
;
/include "qq2.ins.dspic"

;*******************************************************************************
;
;   Configuration constants.
;
/const   maxtasks integer = 4 ;maximum number of concurrent tasks supported
/const   endlim  integer = 6 ;stack err trap when push with this many bytes left on stack

/include "(cog)src/dspic/task.ins.dspic"
         .end
