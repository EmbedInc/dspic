;   ***************************************************************
;   * Copyright (C) 2012, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   This is the first of two canned files included from the application-specific
;   EMCAN module.  This file mostly defines some preprocessor macros and
;   subroutines used to create application-specific data.  The second file
;   contains all executable code and requires the customizable data to already
;   be set.  See the second file (EMCAN2.INS.DSPIC) for most of the information
;   about this module.
;
;   This module implements the required basics of the EmCan protocol for a end
;   device.  EmCan is Embed Inc's multiple-device protocol layered on CAN.  This
;   module requires a procedural interface to the CAN bus to be available, such
;   as is exported by the the standard CAN module.
;
;   The routines in this module can be customized by setting various
;   preprocessor and assembler state before including this file.  The
;   customization state is:
;
;     EMCAN_VBLOCK  -  Preprocessor integer constant that is the 20 bit EmCan
;       vendor block number of this device.  This is the high 20 bits of the 24
;       bit vendor block ID.  The default is FFFFFh.
;
;     EMCAN_DEVID  -  Preprocessor integer constant that is the 4 bit ID of this
;       device within its EmCan vendor block.  This is the low 4 bits of the
;       24 bit vendor block ID.  The default is 15.
;
;     EMCAN_APPID  -  Preprocessor integer constant.  This is the 31 bit EmCan
;       ID of the application for which application-specific actions are
;       implemented.  For now, this module only implements a single application
;       and does not support multiple applications or application switching on
;       the fly.  This constant is therefore required for now.
;
;     EMCAN_ROLEID  -  Fixed 32 bit ID of the role this device performs within
;       its application.  This constant can be used when the single fixed role
;       is known at firmware build time.
;
;       If there is no way to get the role ID, then it is permanently set to
;       FFFFFFFh.
;
;     EMCAN_GETROLE  -  Preprocessor string constant.  This is the name of the
;       external subroutine to call to get the saved non-volatile role ID within
;       the application.  This routine must write the role ID into the 32 bit
;       global integer EMCAN_ROLE, defined in this module.
;
;       If there is no way to get the role ID, then it is permanently set to
;       FFFFFFFh.
;
;     EMCAN_SETROLE  -  Preprocessor string constant.  This is the name of the
;       routine to call when the host is attempting to set a new role for this
;       unit.  The new 32 bit role ID is passed in W1:W0.  It is up to the
;       application what to do about the new attempted role assignment.  If the
;       role assignment is acceptable and allowed, then the global variable
;       EMCAN_ROLE must be updated accordingly.  The new role should also be
;       saved in non-volatile memory such that future calls to the routine given
;       in EMCAN_GETROLE will return this role, even after the unit is reset or
;       powered down.
;
;       If this constant is not defined or set to the empty string, then it is
;       assumed the application is incapable of changing the role.
;
;     EMCAN_RESET  -  Preprocessor string constant.  This is the name of the
;       routine to call when the EmCan layer is reset, like when a valid bus
;       address is unassigned.  Nothing is called when this constant does not
;       exist or is set to the empty string.  When existing, this routine will
;       be called once when the EmCan task is started before any received CAN
;       frames are processed.
;
;     EMCAN_NVOL_READ  -  Preprocessor string constant.  This is the name of the
;       routine to call from the EmCan layer to read one byte of non-volatile
;       memory.  The 24 bit byte address as defined in port definitions and the
;       like is passed in W2:W1 and the byte value is returned in W0.  W2:W1
;       must be adjusted to indicate the next byte.  Multiple calls to this
;       routine therefore return sequential bytes as long as W2:W1 is not
;       altered between calls.
;
;       The EmCan layer makes no assumption about the 24 bit non-volatile
;       addresses.  The starting address of data items are just passed back to
;       this routine.  The application can, for example, allocate some of the
;       24 bits to indicate different address spaces, physical devices, etc.
;       24 bits addresses 16 Mbytes, which is much much more than the amount
;       of non-volatile memory EmCan needs access to, even if every possible
;       non-volatile setting is implemented.  Applications can thefefore take
;       these 24 bits to mean what they want.  For example, if the actual
;       non-volatile memory is larger than 16 Mbytes, then the routine
;       referenced by this constant would need to map the 24 bit address to some
;       part of the actual address space.
;
;       This constant should be defined in the master include file, not the
;       EMCAN module, because it is needed in other modules too, like ECSTR.
;
;     EMCAN_NVOL_WRITE  -  Preprocessor string constant.  This is the name of
;       the routine to call from the EmCan layer to write one byte to
;       non-volatile memory.  The byte is passed in the low 8 bits of W0 and
;       the 24 bit EmCan-visible non-volatile memory address in W2:W1.  The
;       routine must adjust W2:W1 to indicate the next sequential byte.  The
;       EmCan routines otherwise do not interpret the address or make any
;       assmumptions about it.  See the description for EMCAN_NVOL_READ, above,
;       for more details on the EmCan-visible non-volatile address space.
;
;       This constant should be defined in the master include file, not the
;       EMCAN module, because it is needed in other modules too, like ECSTR.
;
;     EMCAN_NVOL_FLUSH  -  Preprocessor string constant.  The name of the
;       routine to call to guarantee all data written with the routine named in
;       EMCAN_NVOL_WRITE is physically written to the non-volatile memory.  The
;       EmCan layer does not know when the host is done sending a sequence of
;       commands that cause non-volatile writes.  It therefore has no good time
;       to call the flush routine.  This implementation therefore uses a timer.
;       If no non-volatile memory modifications have been requested for a while,
;       then this flush routine is called.  This time is set by the TFLUSH
;       constant below, and is usually around 1 second.  When this constant does
;       not exist or is set to the empty string, it is assumed that flushing
;       written data is not necessary in this implementation.  This could be,
;       for example, if the application implemented its own automatic flush
;       mechanism even if the underlying non-volatile memory requires flushing.
;
;     EMCAN_CONFIG  -  Preprocessor string constant.  The name of the routine to
;       call when a valid EmCan CONFIG frame is received.  See the EmCan spec
;       for details.  These can contain requests to turn the user-visible device
;       ID on or off, and to enable/disable configuration state.  The global
;       flags EMCAN_SHOW, EMCAN_CFGALLOW, and EMCAN_CONFIG should be updated by
;       this routine.  The FLAGS byte from the CONFIG frame is passed in W0.
;       All the W0-W14 registers may be trashed.
;
;       When this constant is not defined or is the empty string, then the EmCan
;       layer automatically implements its own policy.  The EMCAN_SHOW flag is
;       always set as requested by the host, and configuration mode is allowed
;       as long as no other devices are detected on the bus.
;
;     EMCAN_FWINFO  -  Preprocessor string constant.  The name of the routine to
;       call to send additional FWINFO CAN frames beyond the one for this
;       firmware.  The EmCan code will send a FWINFO frame for this firmware,
;       using the assembler constants FWTYPE, FWVER, and FWSEQ.  If the device
;       contains other processors, then FWINFO frames should be sent for them
;       also.  When EMCAN_FWINFO is not the empty string, the routined named by
;       it will be called after the FWINFO frame has been sent for this
;       firmware.
;
;       The application routine may trash W0-W14, and should use the
;       CAN_SEND_xxx routines to build and send the CAN frame.
;
;
;   Global variables defined in this module that require application actions:
;
;     EMCAN_VBLOCKID -  This is a 32 bit variable that holds the combined EmCan
;       vendor block number and the device ID in its low 24 bits.  The upper 8
;       bits must be 0.
;
;       This value is initialized by EMCAN_INIT either to defaults, or the
;       values  provided by EMCAN_VBLOCK and EMCAN_DEVID (described above).  If
;       this static assignment is not sufficient, the application can set this
;       variable after EMCAN_INIT is called and before EMCAN_START.
;
;   External symbols:
;
;     TICK100MS  -  Global word that is incremented every 100 ms.
;
;     SERIAL  -  32 bit serial number of this device, stored in low to high word
;       order.  It must be valid by the time EMCAN_START is called.
;
;     CANIN_ID, CANIN_NDAT, CANIN_DAT  -  Data for the last received CAN frame.
;       See the description in the ECAN.INS.DSPIC library file for details of
;       these variables.
;
;     FLAG_CANIN  -  CAN frame has been received and its data is locked.  See
;       the description in ECAN.INS.ASPIC for details.
;
;     FLAG_CANIN_EXT  -  The received CAN frame is extended.  See the
;       description in ECAN.INS.ASPIC for details.
;
;     FLAG_CANIN_RTR  -  The received CAN frame is a remote request.  See the
;       description in ECAN.INS.ASPIC for details.
;
;     FLAG_CANSEND  -  Indicates that a task has the CAN sending mechanism
;       locked.  CAN_SEND_INIT will stall waiting for it to be released when
;       called while this flag is set.
;

;*******************************************************************************
;
;   Check the values set before this file was included and set defaults as
;   needed.
;
/if [not [exist "emcan_appid"]] then
  /show "  Mandatory constant EMCAN_APPID not defined."
         .error  "emcan_appid"
         .end
  /stop
  /endif
/if [<> [and emcan_appid 16#80000000] 0] then
  /show "  Invalid EMCAN_APPID value.  Value must be 31 bits or less."
         .error  "emcan_appid"
         .end
  /stop
  /endif

/if [not [exist "emcan_vblock"]] then
  /const emcan_vblock integer = 16#FFFFF
  /endif
/if [not [exist "emcan_devid"]] then
  /const emcan_devid integer = 15
  /endif
/if [not [exist "emcan_getrole"]] then
  /const emcan_getrole string = ""
  /endif
/if [not [exist "emcan_setrole"]] then
  /const emcan_setrole string = ""
  /endif
/if [not [exist "emcan_reset"]] then
  /const emcan_reset string = ""
  /endif
/if [not [exist "emcan_nvol_write"]] then
  /const emcan_nvol_write string = ""
  /endif
/if [not [exist "emcan_nvol_read"]] then
  /const emcan_nvol_read string = ""
  /endif
/if [not [exist "emcan_nvol_flush"]] then
  /const emcan_nvol_flush string = ""
  /endif
/if [not [exist "emcan_config"]] then
  /const emcan_config string = ""
  /endif
/if [not [exist "emcan_fwinfo"]] then
  /const emcan_fwinfo string = ""
  /endif

;*******************************************************************************
;
;   Configuration constants.
;
/const   treq    real = 2.0  ;min seconds between node address request
/const   treqres real = 0.2  ;min wait for request after reset
/const   tadr    real = 3.0  ;minutes valid lifetime for a node address
/const   tnag    real = 6.5  ;seconds to nag about node address before expires
/const   tstopen real = 3.0  ;min seconds to wait between stream re-open tries
/const   tstdat  real = 2.0  ;first seconds to wait for ACK from stream data send
/const   tstmax  real = 10.0 ;max seconds need to wait for stream data send ACK
/const   tflush  real = 1.0  ;time after last nvol write to call flush
/const   ticksec real = 0.100 ;clock tick period, seconds
/const   recvsz  integer = 32 ;size of receiving stream FIFO
/const   sendsz  integer = 32 ;size of sending stream FIFO
.equiv   stacksz, 128        ;EmCan task stack size, bytes
;
;   Derived constants.
;
/const   emcan_vblock_id integer = [or [shiftl emcan_vblock 4] emcan_devid] ;VBLOCKID
.equiv   ntkreq, [rnd [/ treq ticksec]] ;clock ticks between address requests
.equiv   ntkreqres, [rnd [/ treqres ticksec]] ;min ticks before adr request after reset
.equiv   ntklife, [rnd [/ [* tadr 60] ticksec]] ;clock ticks assigned address lifetime
.equiv   ntknag, [rnd [/ tnag ticksec]] ;ticks left in life to start nagging at
.equiv   ntkopen, [rnd [/ tstopen ticksec]] ;min ticks between out stream open tries
.equiv   ntkstdat, [rnd [/ tstdat ticksec]] ;ticks before first stream out data resend
.equiv   ntkstmax, [rnd [/ tstmax ticksec]] ;max ticks required between stream out data resends
.equiv   ntkflush, [rnd [/ tflush ticksec]] ;ticks after last nvol write to call flush
.equiv   recvsz, [v recvsz]
.equiv   sendby, [+ sendsz 1] ;allocated size of stream sending queue

;*******************************************************************************
;
;   Macro CANCMD opc, adr
;
;   Creates one entry in a command dispatch table.  OPC is the opcode for this
;   entry and ADR is the address of the routine to run to process a frame with
;   that opcode.
;
;   Each table entry is 2 instruction words (4 addresses) long.  The low 16 bits
;   of the first instruction word contains the opcode the table entry matches.
;   The high 8 bits of the first instruction word are unused and should be set
;   to 0 for now.  The second instruction word contains the address of the
;   routine to run to process a CAN frame of the indicated opcode and the
;   conditions defined for that table.  The end of table is indicated by the
;   low 16 bits of the first word being all 1.
;
.macro cancmd, opc, adr
         .pword  \opc
         .pword  \adr
  .endm

;*******************************************************************************
;
;   Macro TBL_END
;
;   Indicates the end of a opcodes dispatch table.  Each table must end with
;   this macro.
;
.macro tbl_end
         .pword  0xFFFF
  .endm

;*******************************************************************************
;
;   Port definition tables.  The information about each EmCan port defined by
;   this node is put in program memory tables so that it can be found by the
;   code in this module at run time with the minimum of application support.
;
;   The tables are built from definitions made in the application part of this
;   module (the file that includes this one).  The preprocessor macros and
;   subroutines below are provided to build the tables from information provided
;   in more easily human-understandable format.  The details about how to use
;   these facilities is documented in the template for the application specific
;   part of this file.  This section documents the layout of the tables, since
;   that is private to the code here.  Some of the information is made
;   accessible externally via the EMCAN_PORT_xxx routines.
;
;   The master ports table starts at EMCAN_PORTS in program memory.  This
;   contains all the fixed-size data for each defined port and references to
;   variable-size data in other places.
;
;   Each entry is a whole number of program memory words, which hold 24 bits of
;   information and take two addresses.  The first address is even and
;   references the low 16 bits.  The second address is odd and references the
;   high 8 bits.
;
;   The address offset of each program memory word from the start of the entry
;   for that port is shown, followed by a description of its contents.  For each
;   port:
;
;     0:
;
;       Low word: TYPE ID.  Both upper bits 0 indicates this port is not defined
;         and that the rest of this table entry contains no meaningful data.
;
;       High byte: BITS.  This is the number of data bits - 1.
;
;     2:
;
;       Low word: DIM ID.  Indicates the physical property represented by the
;         port value.
;
;       High byte: DFORM.  Data format ID.
;
;     6, 4: Zero value offset, 48 bit floating point.
;
;     10, 8: Scale factor, 48 bit floating point.
;
;     12: Pointer to description string in program memory.  This pointer is
;       always valid.  If no description string was supplied, then this will
;       point to a empty string.  The first byte of the string is the length,
;       with exactly that many data bytes following.
;
;     14: Role address.  The non-volatile memory address of where the 32 bit
;       role ID is stored.  FFFFFFh indicates settable role is not supported and
;       the role ID is always 0.
;
;     16: Initial data address.  The non-volatile memory address of where the
;       initial port data is stored.  The data is stored in least to most
;       significant byte order, and only needs to be enough bytes long to hold
;       the number of bits indicated by BITS.  FFFFFFh indicates this port does
;       not support a settable startup value.
;
;     18: Config address.  The non-volatile memory address of the configuration
;       data for this port.  The data is stored in least to most significant
;       byte order, and only needs to be enough bytes long to hold the size of
;       configuration data required by this port type.  FFFFFFh indicates this
;       port does not support a settable configuration.
;
;     20: Usage string address.  The non-volatile memory address of the settable
;       usage description string for this port.  FFFFFFh indicates this port
;       does not support a settable usage string, which is therefore always the
;       empty string.  The first byte of the string structure pointed to by this
;       address is the maximum allowable string length.  The second byte is the
;       actual current string length, which is then followed by exactly that
;       many valid data bytes.  When a new string is written, its length must
;       not exceed the maximum allowed length as specified by the first byte of
;       the structure.  The maximum allowed length is irrelevant when reading
;       the string.
;
;     22: Write routine address.  The address of the routine to call to write
;       new data to the port.  The port number will be passed in W14 and W1 will
;       be pointing to the sequence of data bytes as passed from the host.  All
;       the W0-W14 registers may be trashed.  This routine is responsible for
;       any interpretation of the data depending on the port TYPE and the
;       current configuration setting.  This address must point to a valid
;       routine when the port is writable.
;
;     24: Read routine address.  The address of the routine to call to read data
;       from the port.  The port number will be passed in W14 and W1 will point
;       to a byte buffer of where to write the port data, in most to least
;       significant byte order.  All the W0-W14 registers may be trashed.  This
;       routine is responsible for any interpretation of the data depending on
;       the port TYPE and the current configuration setting.  This address must
;       point to a valid routine when the port is readable.
;
;     26:
;
;       Low word:  Number of function ID bytes in low byte.  This byte can have
;         a range of 0 to 6.
;
;       High byte:  Number of config bytes.  This is a function of the port
;         type, so is technically redundant information.  However, it is stored
;         here to avoid the need to derive this information from the port type
;         at run time.
;
;     28, 30: Function ID bytes.  Bytes are in low to high order within each
;       program memory word.  The first byte is therefore the low byte at
;       address 28, the third byte at address 29, etc.  Only the first N bytes
;       contain valid information, where N is the value in the low byte at
;       address 26.
;
;   Each port description therefore occupies 32 addresses of program memory,
;   which is a total of 48 bytes of data.
;
/const   emcan_portdeflen integer = 32 ;port definition length, prog mem addresses

//  Define symbolic constants for some of the port definition values.
//
/const   type_bits integer = 0 ;just bits with not special handling
/const   type_bool integer = 1 ;boolean
/const   type_cntbool integer = 2 ;counted boolean event

/const   format_unspec integer = 0 ;unspecified data format
/const   format_uint integer = 1 ;unsigned integer
/const   format_sint integer = 2 ;twos complement signed integer

/const   dim_none integer = 0 ;not a physical quantity
/const   dim_unsc integer = 1 ;raw numeric, scale and offset not applied
/const   dim_num integer = 2 ;unspecified numeric, scale and offset applied
/const   dim_dless integer = 3 ;dimensionless
/const   dim_length integer = 4 ;length, meters
/const   dim_mass integer = 5 ;mass, kilograms
/const   dim_time integer = 6 ;time, seconds
/const   dim_force integer = 7 ;force, newtons
/const   dim_emf integer = 8 ;EMF, volts
/const   dim_curr integer = 9 ;current, amperes
/const   dim_freq integer = 10 ;frequency, Hz

//   Define the variables that describe the various port parameters.
//
/var new port integer        ;0-N port number
/var new port_io string      ;input/output selection
/var new port_type integer   ;type ID
/var new port_format integer ;data format ID
/var new port_size integer   ;number of bits in the data value
/var new port_dim integer    ;physical quantity ID
/var new port_offset real    ;zero offset
/var new port_scale real     ;scale factor
/var new port_desc string    ;fixed description string
/var new port_roleadr string ;expression for non-volatile address of role ID
/var new port_initadr string ;expression for non-volatile address of start value
/var new port_cfgadr string  ;expression for non-volatile address of configuration data
/var new port_useadr string  ;expression for non-volatile address of usage string
/var new port_write string   ;expression for routine to call to write to port
/var new port_read string    ;expression for routine to call to read from the port
/var new port_funcid string  ;function ID, 0 to 6 tokens with 0-255 numerical value

////////////////////////////////////////
//
//   Subroutine PORTVALS_INIT
//
//   Initialize the variables used to define a port.  This routine is called
//   before each port definition is set.
//
/subroutine portvals_init
  /set port -1
  /set port_io ""
  /set port_type -1
  /set port_format -1
  /set port_size 0
  /set port_dim -1
  /set port_offset 0.0
  /set port_scale 1.0
  /set port_desc ""
  /set port_roleadr ""
  /set port_initadr ""
  /set port_cfgadr ""
  /set port_useadr ""
  /set port_write ""
  /set port_read ""
  /set port_funcid ""
  /endsub

////////////////////////////////////////
//
//   Subroutine PORT_DEFINE
//
//   Write the definition of the next sequential port into program memory at the
//   current location.  This adds the entry for one port to the ports table.
//
/subroutine port_define
  /var local error bool
  /var local typeword integer = 0
  /var local ii integer
  /var local s string
  /var local cfgsize integer ;number of bytes required to hold config data
  /var local tk string
  /var local ind integer
  /var local funcidlen integer ;number of bytes in port function ID
  /var local funcid0 integer
  /var local funcid1 integer
  /var local funcid2 integer
  /var local funcid3 integer
  /var local funcid4 integer
  /var local funcid5 integer
  /var local err bool

  /block                     ;check for inconsistant or invalid values
    /var local err bool
    /set error true          ;not all checks definitely passed yet
    /if [= port -1] then
      /show "  Port number not set, expected " nports
      /quit
      /endif
    /if [<> port nports] then
      /show "  Port definition out of sequence."
      /show "  New definition is for port " port ", expected " nports "."
      /quit
      /endif

    /set port_io [ucase port_io]
    /if [= port_io "UNUSED"] then
      /set error false
      /set typeword 0
      /quit
      /endif
    /set err true
    /if [= port_io "IN"] then
      /set err false
      /set typeword 16#4000
      /endif
    /if [= port_io "OUT"] then
      /set err false
      /set typeword 16#8000
      /endif
    /if [= port_io "INOUT"] then
      /set err false
      /set typeword 16#C000
      /endif
    /if err then
      /quit
      /endif
    /if [<> [and typeword 16#8000] 0]
      /then                  ;the port is writeable
        /if [= port_write ""] then
          /show "  Port is writeable, but no write routine specified."
          /quit
          /endif
      /else                  ;the port is not writeable
        /if [<> port_write ""] then
          /show "  Port is not writeable, but write routine specified."
          /quit
          /endif
      /endif
    /if [<> [and typeword 16#4000] 0]
      /then                  ;the port is readable
        /if [= port_read ""] then
          /show "  Port is readable, but no read routine specified."
          /quit
          /endif
      /else                  ;the port is not readable
        /if [<> port_read ""] then
          /show "  Port is not readable, but read routine specified."
          /quit
          /endif
      /endif

    /if [= port_type -1] then
      /show "  PORT_TYPE not set in definition of port " nports
      /quit
      /endif
    /if [<> port_type [and port_type 16#3FFF]] then
      /show "  Invalid PORT_TYPE value of " port_type " for port " nports
      /quit
      /endif
    /set cfgsize 0           ;init to default configuration size
    /if [= port_type type_bool] then
      /set cfgsize 1
      /endif
    /if [= port_type type_cntbool] then
      /set cfgsize 1
      /endif
    /set typeword [or typeword port_type]

    /if [= port_format -1] then
      /show "  PORT_FORMAT not set in definition of port " nports
      /quit
      /endif
    /if [<> port_format [and port_format 16#FF]] then
      /show "  Invalid PORT_FORMAT value of " port_format " for port " nports
      /quit
      /endif

    /if [= port_size 0] then ;use default port size ?
      /if [= port_type type_bool] then
        /set port_size 1
        /endif
      /endif
    /if [= port_size 0] then
      /show "  PORT_SIZE not set in definition of port " nports
      /quit
      /endif
    /if [or [< port_size 1] [> port_size 48]] then
      /show "  Invalid PORT_SIZE value of " port_size " for port " nports
      /quit
      /endif

    /if [= port_dim -1] then
      /show "  PORT_DIM not set in definition of port " nports
      /quit
      /endif
    /if [<> port_dim [and port_dim 16#FFFF]] then
      /show "  Invalid PORT_DIM value of " port_dim " for port " nports
      /quit
      /endif

    //   Parse the port function ID string PORT_FUNCID.  The local variables
    //   FUNCIDLEN and FUNCID0-FUNCID5 are set.
    //
    /set ind 1               ;init string parse index
    /set funcidlen 0         ;init number of bytes in port function ID
    /set ii 0                ;init 0-5 function ID byte index
    /set err true
    /block
      /if [<= ind [slen port_funcid]]
        /then                ;still data to be parsed from PORT_FUNCID
          /call string_token port_funcid ind tk ;get next token from input string
          /set funcid[v ii] [chars tk] ;save this byte value
          /if [or [< funcid[v ii] -128] [> funcid[v ii] 255]] then
            /show "  Port function ID byte " [+ ii 1] " of port " nports " is out of range"
            /quit
            /endif
          /set funcidlen [+ funcidlen 1] ;count one more function ID byte in use
        /else                ;PORT_FUNCID has been exhausted
          /set funcid[v ii] 16#FF ;set byte to the unused value
        /endif
      /set ii [+ ii 1]
      /if [<= ii 5] then
        /repeat
        /endif
      /set err false         ;indicate no error detected in the loop
      /endblock              ;back to set next port function ID byte
    /if err then             ;loop exited due to error ?
      /quit
      /endif
    /if [<= ind [slen port_funcid]] then
      /show "  Too many function ID bytes for port " nports
      /quit
      /endif

    /set error false         ;all checks passed
    /endblock                ;done with validity checking, ERROR set accordingly
  /if error then
    /show "  Error in definition of port " nports
         .error  "Port definition"
         .end
    /stop
    /endif

  /const port[v nports]_desc string = port_desc ;save description string of this port

  /write
  /set s [str "         ;   port " nports]
  /if [<> port_desc ""] then
    /set s [str s ", " port_desc]
    /endif
  /write s
  /write "         ;"

  /block
    /if [= typeword 0] then  ;special case of unused port ?
         .pword  0x000000    ;BITS, TYPE
         .pword  0x000000    ;DFORM, DIM
         fp48p   0.0         ;offset
         fp48p   1.0         ;scale
         .pword  empty_string ;description string pointer
         .pword  0xFFFFFF    ;nvol role address
         .pword  0xFFFFFF    ;nvol startup value address
         .pword  0xFFFFFF    ;nvol config data address
         .pword  0xFFFFFF    ;nvol usage string address
         .pword  0xFFFFFF    ;write routine address
         .pword  0xFFFFFF    ;read routine address
         .pword  0x00FF00    ;config size, number of function ID bytes
         .pword  0xFFFFFF    ;function ID bytes
         .pword  0xFFFFFF
      /quit
      /endif

         pword   [or [shiftl [- port_size 1] 16] typeword], "BITS, TYPE"
         pword   [or [shiftl port_format 16] port_dim], "DFORM, DIM"
         fp48p   [v port_offset]
         fp48p   [v port_scale]

    /if [= port_desc ""]
      /then                  ;empty description string ?
         .pword  empty_string
      /else
        /set ii 0            ;init number of description string to reference
        /block               ;back to check next port for duplicate description
          /if [>= ii nports] then ;done checking all previous description strings ?
            /quit
            /endif
          /if [= port[v ii]_desc port_desc] then ;duplicate of previous port ?
            /quit
            /endif
          /set ii [+ ii 1]
          /repeat
          /endblock          ;II is set to port num descr string to reference
         .pword  port[v ii]_desc
      /endif

    /if [= port_roleadr ""]
      /then
         .pword  0xFFFFFF    ;nvol role address
      /else
         .pword  [chars port_roleadr] ;nvol role address
      /endif

    /if [= port_initadr ""]
      /then
         .pword  0xFFFFFF    ;nvol startup value address
      /else
         .pword  [chars port_initadr] ;nvol startup value address
      /endif

    /if [= port_cfgadr ""]
      /then
         .pword  0xFFFFFF    ;nvol config data address
      /else
         .pword  [chars port_cfgadr] ;nvol config data address
      /endif

    /if [= port_useadr ""]
      /then
         .pword  0xFFFFFF    ;nvol usage string address
      /else
         .pword  [chars port_useadr] ;nvol usage string address
      /endif
    /endblock

  /if [= port_write ""]
    /then
         .pword  0xFFFFFF    ;no write routine
    /else
         .pword  [chars port_write] ;write routine address
    /endif

  /if [= port_read ""]
    /then
         .pword  0xFFFFFF    ;no read routine
    /else
         .pword  [chars port_read] ;read routine address
    /endif

  /set ii funcidlen          ;number of function ID bytes in low byte
  /set ii [or ii 16#00FF00]  ;middle byte is unused
  /set ii [or ii [shiftl cfgsize 16]] ;config size in high byte
  /set s ""
  /call tabopcode s
  /set s [str s ".pword"]
  /call taboperand s
  /set s [str s "0x" [int ii "fw 6 lz base 16 usin"]]
  /call startcomm s
  /set s [str s "config size, unused, N function ID bytes"]
  /write s

  /set ii [or [shiftl funcid2 16] [shiftl funcid1 8] funcid0]
  /set s ""
  /call tabopcode s
  /set s [str s ".pword"]
  /call taboperand s
  /set s [str s "0x" [int ii "fw 6 lz base 16 usin"]]
  /call startcomm s
  /set s [str s "function ID bytes 2-0"]
  /write s

  /set ii [or [shiftl funcid5 16] [shiftl funcid4 8] funcid3]
  /set s ""
  /call tabopcode s
  /set s [str s ".pword"]
  /call taboperand s
  /set s [str s "0x" [int ii "fw 6 lz base 16 usin"]]
  /call startcomm s
  /set s [str s "function ID bytes 5-3"]
  /write s

  /set nports [+ nports 1]   ;count one more defined port
  /call portvals_init        ;reset values ready for defining next port
  /endsub

/var new nports integer = 0  ;init number of EmCan ports
/call portvals_init          ;init values ready for first port definition

.section .code_emcan_defs, code
