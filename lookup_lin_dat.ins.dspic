;   Table lookup routine with the following characteristics:
;
;     - The table is in data memory or mapped to the data memory address space.
;
;     - Linear interpolation will be performed.
;
;     - The table values are assumed to be unsigned 16 bit integers.
;
;     - The table is one-dimensional (single input value, single output value).
;
;     - The table must contain a power of 2 segments, which means a power of 2
;       plus 1 entries.
;
;   The interface to this routine follows the general table lookup routines
;   interface.  The input value is passed in W0, with 0-65535 being full scale.
;   The output value is returned in W0.  The table address is passed in the
;   program memory word immediately following the call instruction.  The lookup
;   routine returns to the first instruction after that (it skips over the table
;   address word).
;
;   The first word of the table contains the table size as the number of
;   segments.  The number of segments MUST be a power of 2 and MUST be at least
;   1.  These conditions are not checked, but all manner of strange things can
;   occur when they are violated.  Table segments refers to the ranges between
;   table entries.  The number of table entries is therefore the number of
;   segments plus 1.  Since the minimum number of segments is 1, the minimum
;   number of table entries is 2.
;
;   Subsequent words of the table after the initial size word are the table
;   entries.  Entries will be interpolated as 16 bit unsigned integers.
;

;*******************************************************************************
;
;   Configuration constants.
;

;
;   Derived constants.
;


;*******************************************************************************
;
;   Variables.
;
;*******************
;
;   Global state.
;
.section .ram_lookup_lin_dat, bss


;*******************
;
;   Local state.
;


.section .code_lookup_lin_dat, code
;*******************************************************************************
;
;   Subroutine LOOKUP_LIN_DAT
;
;   Linearly interpolate a table in data memory.  W0 is the table function input
;   value with a range of 0-65553.  The linearly interpolated result will be
;   returned in W0.
;
;   This routine trashes TBLPAG.
;
         glbsub  lookup_lin_dat, regf1 | regf2 | regf3 | regf4 | regf5
;
;   The data stack currently looks like this:
;
;     W15-14  -->  table pointer address low word
;     W15-12  -->  table pointer address high word
;     W15-10  -->  saved W1
;     W15-8   -->  saved W2
;     W15-6   -->  saved W3
;     W15-4   -->  saved W4
;     W15-2   -->  saved W5
;     W15     -->  unused
;
         sub     w15, #12, w1 ;point to table pointer high address word
         mov     [w1--], w2  ;get high address word, point to low
         mov     w2, Tblpag  ;set high bits of program memory address to read
         mov     [w1], w3    ;get low address word of the table pointer
         tblrdl  [w3], w2    ;get the table start address (table is in data mem)
         add     w3, #2, [w1++] ;update low word of return address
         mov     [w1], w3
         addc    w3, #0, [w1] ;update high word of return address
;
;   The table start address is in W2 and the return address has been fixed up to
;   skip over the table pointer.
;
         mov     [w2++], w3  ;N segments into W3, adr of first entry into W2

         ff1r    w3, w3      ;make number of integer bits + 1 in input value
         sub     w3, #1, w5  ;save number of integer bits
         mov     #17, w4
         sub     w4, w3, w3  ;make number of fraction bits in the input value
         lsr     w0, w3, w1  ;make offset of first table entry of the interval
         add     w2, w1, w2  ;make address of first table entry of interval
         add     w2, w1, w2
;
;   Current register contents:
;
;     W0  -  The input value.
;
;     W1  -  Unused.
;
;     W2  -  Address of the first table entry of the interval.
;
;     W3  -  Number of fraction bits in the input value.
;
;     W4  -  Unused.
;
;     W5  -  Number of integer bits in the input value.
;
         mov     #0xFFFF, w4 ;make fraction bits mask in W4
         lsr     w4, w5, w4
         and     w0, w4, w0  ;mask in fraction bits (weight for second entry)

         add     #1, w4
         sub     w4, w0, w4  ;make weight for firrst entry of the interval

         mul.uu  w4, [w2++], w4 ;make weighted first entry in W5:W4
         mul.uu  w0, [w2], w0 ;make weighted second entry in W1:W0

         add     w0, w4, w4  ;sum the weighted results in W5:W4
         addc    w1, w5, w5
;
;   Current register usage:
;
;     W0  -  Unused.
;
;     W1  -  Unused.
;
;     W2  -  Unused.
;
;     W3  -  Number of fraction bits in the input value.
;
;     W5:W4  -  Interplated result shifted left by the number of fraction bits
;               in the input value.
;
         sub     w3, #1, w2  ;number of fraction bits - 1
         mov     #1, w0
         sl      w0, w2, w0  ;make mask for first fraction bit
         add     w0, w4, w4  ;apply rounding to integer part of result
         addc    #0, w5

         lsr     w4, w3, w0  ;get final bits from low word of the result

         mov     #16, w2
         sub     w2, w3, w2  ;make number of unused high bits in high word
         sl      w5, w2, w5  ;move high word contribution into place
         ior     w5, w0, w0  ;assemble final result in W0

         leaverest
