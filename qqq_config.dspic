;   ***************************************************************
;   * Copyright (C) 2018, Embed Inc (http://www.embedinc.com)     *
;   *                                                             *
;   * Permission to copy this file is granted as long as this     *
;   * copyright notice is included in its entirety at the         *
;   * beginning of the file, whether the file is copied in whole  *
;   * or in part and regardless of whether other information is   *
;   * added to the copy.                                          *
;   *                                                             *
;   * The contents of this file may be used in any way,           *
;   * commercial or otherwise.  This file is provided "as is",    *
;   * and Embed Inc makes no claims of suitability for a          *
;   * particular purpose nor assumes any liability resulting from *
;   * its use.                                                    *
;   ***************************************************************
;
;   This module provides a procedural interface to static configuration data
;   for individual modules or subsystems.  The configuration data is stored in
;   non-volatile memory.  This module is layered on the standard NVOL_xxx
;   routines.
;
;   Configuration information is stored in non-volatile memory for each module
;   that has any configuration options.  Such modules typically include
;   configuration routines that are called during system startup.  Each module
;   configures itself according to the static configuration information for
;   that module.  Such configuration can indicate that the module is not used at
;   all.  In that case, the module becomes just unused instructions after the
;   configuration routine returns.
;
;   A unique ID is assigned to each configurable module.  The configuration
;   routine for a module inquires the configuration data for its ID, then
;   configures its module accordingly.  Configuration IDs are 8-bit values in
;   the range 0 to 254.  ID 0 is reserved for the main system.  The special
;   value of 255 is reserved for internal use by this configuration code.
;
;
;   Exported routines
;
;     CONFIG_INIT
;
;       Must be first call into this module.
;
;     CONFIG_LOCK
;
;       Acquire the exclusive lock on the remaining configuration routines.
;       Only one subsystem at a time can use these routines.  This routine waits
;       as necessary for the lock to become available before acquiring the lock
;       and returning.  The lock is held by the caller when this routine
;       returns.
;
;       All the routines listed from here to CONFIG_UNLOCK must only be called
;       with the lock held.
;
;     CONFIG_SETUP
;
;       Set up for getting configuration data for a particular subsystem.  The
;       subsystem ID is passed in W0.  W0 is returned the number of
;       configuration bytes for that subsystem.  The config data reading state
;       is initialized to the first byte.  The Z flag is set if there are no
;       config data bytes, and cleared if there is at least one.
;
;     CONFIG_I8U
;     CONFIG_I8S
;     CONFIG_I16U
;     CONFIG_I16S
;     CONFIG_I24U
;     CONFIG_I24S
;     CONFIG_I32U
;     CONFIG_I32S
;     CONFIG_FP32
;
;       Routines that return the next consecutive configuration data byte(s) in
;       various formats.  The IxxU and IxxS routine return integer unsigned and
;       signed values, respectively.  The xx number indicates the number of
;       configuration data bits.  FPxx routines return floating point values.
;
;       Data of 16 bits or less is returned in W0.  Data of 17 to 32 bits is
;       returned in W1:W0.
;
;       Sequential configuration bytes are read.  When all the configuration
;       bytes for the current subsystem have been exhausted, bytes with value 0
;       are silently substituted.  It is the subsystem's responsibility to only
;       read or interpret actual configuration bytes.
;
;     CONFIG_SKIP
;
;       Skip the number of configuration bytes indicated in W0.
;
;     CONFIG_INDEX
;
;       Returns W0 the 0-N index of the next configuration byte that will be
;       read for the current subsystem.
;
;     CONFIG_INDEX_SET
;
;       Set the current configuration bytes read index to the value in W0.
;
;     CONFIG_ADR
;
;       Get the non-volatile memory address of the next config byte to read.
;       This address is only valid when there is at least one config byte left
;       to read.  The address is returned in W2:W1, which is compatible with the
;       NVOL_xxx routines.
;
;     CONFIG_LEFT
;
;       Sets W0 to the number of configuration bytes left to read, starting at
;       the current read index.  This value is always 0 when there are no more
;       configuration bytes left to read, regardless of how many bytes have been
;       read past the end.
;
;     CONFIG_OVR0
;
;       Override the configuration data for subsystem 0.  The configuration data
;       for subsystem 0 will be the single byte in the low bits of W0,
;       regardless of what is stored in non-volatile memory.
;
;     -----  End of routines that require the lock to be held when called -----
;
;     CONFIG_UNLOCK
;
;       Releases the exclusive lock on these routines.  This undoes what
;       CONFIG_LOCK does.  The lock can only be released by the same task that
;       called CONFIG_LOCK.  Calls by other tasks are ignored.  Attempts to
;       release the lock when it is not locked are silently ignored.
;
;     CONFIG_OVR0_WINDOW
;
;       Allow a short time-window during which the CFGOVR0 command will be
;       accepted.  Specfically, the steps performed are:
;
;         1 - The CFGOVR0 flag is set.  This allows the CFGOVR0 command to act.
;
;         2 - The CFGOVR0 repsonse is sent.  This indicates to the host that a
;             CFGOVR0 command will be accepted for a short window.
;
;         3 - Waits 100 ms or until the first command from the host is
;             processed, whichever occurs first.
;
;         4 - Makes sure the CFGOVR0 flag is cleared.  This ends the time window
;             during which CFGOVR0 commands are accepted.
;
;     CONFIG_STAT
;
;       Indicate a event or status of a subsystem during configuration.  The
;       subsystem ID is in the low byte of W0, and the status code in the low
;       byte of W1.  Status codes with the high bit set (128 - 255) cause the
;       CFGFAIL flag to be set.  This indicates to the system after
;       configuration is complete that one or more subsystems could not be
;       configured as required, and that normal operation is not possible.
;
;     CONFIG_STAT_SYS0
;
;       Send a CFGSTAT response for the current status of the main system
;       (subsystem  0).
;
;     CONFIG_MDEVS
;
;       Configure all the MDEVs in the system.  The SYS MDEV is configured
;       first.  If it is not configured for normal operation, then the remaining
;       MDEVs are not configured.
;
;       Individual subsystems may emit CFGSTAT responses while being configured.
;       Any status code with the high bit set (128 - 255) causes the global
;       CFGFAIL flag to be set, which indicates overall configuration failure,
;       and that normal operation is not possible.
;
;       When configuration is complete, a CFGSTAT response is sent to the host
;       reporting the overall system configuration result.  This response will
;       be for the SYS subsystem (ID 0), with the status code being one of the
;       SYS_STAT_xxx constant values.
;
;
;   Commands implemented in this module if the corresponding CMD_xxx constants
;   are defined:
;
;     CFGOVR0 dat
;
;       Explicitly provide a single byte of configuration data for subsystem 0
;       (the SYSTEM module).  The SYSTEM module will be configured as if it had
;       the DAT byte as its only configuration data.  The non-volatile
;       configuration data for the SYSTEM module is irrelevant.
;
;       This command is only acted upon when the CFGOVR0 flag is set.  The
;       command always clears this flag when done.
;
;       The responses of the standard SYS module to single configuration byte
;       values are:
;
;         0  -  Test mode.  No other modules are configured.  The CFGRUN flag is
;               not set, indicating not to enter normal operation.  This mode is
;               not an error (CFGFAIL not set).
;
;         1  -  Normal operation.
;
;         8-127  -  Non-failure status condition.  The configuration value is
;               sent as a status condition by the system module during
;               configuration.  This can be useful for testing the sending and
;               handling of non-failure status conditions.  Values of 8-63 let
;               the system continue with normal operation.  Values 64-127 will
;               continue in test mode.
;
;         128-248  -  Failure status condition.  The configuration value is sent
;               as a status condition by the system module during configuration.
;               This can be useful for testing the sending and handling of
;               failure status conditions.
;
;         All remaining values are reserved for future use, and act like 0 for
;         now.
;
;       The purpose of this mechanism is to allow the host to force the system
;       to start in a "safe" mode.  The special DAT byte value of 0 is
;       guaranteed to start the system without any optional application modules
;       being configured, regardless of the state of non-volatile memory.  This
;       is itended to be the minimum state that provides configuration port
;       access to the low level hardware capabilities.  It is permissible for
;       the system to enter "test" mode, which may provide direct access to I/O
;       lines and the like to the configuration port.  All other values of DAT
;       are specific to the system.
;
;     CFG id
;
;       Send the CFG response for subsystem ID.  The CFG response provides the
;       configuration data for a subsystem.
;
;     CFGSTAT
;
;       Get the status resulting from system configuration.  A CFGSTAT response
;       is sent for the status of subsystem 0.
;
;
;   Responses that can be emitted by this firmware:
;
;     CFGOVR0
;
;       Notifies the host of the opportunity to send a CFGOVR0 command.  For the
;       CFGOVR0 command to be acted upon, it must be received within 100 ms of
;       this CFGOVR0 response.
;
;     CFG: id n dat ... dat
;
;       Sent in response to the CFG command.  Gives the configuration data for
;       the indicated ID.  N is the 16 bit number of data bytes.  Exactly N data
;       bytes follow N.
;
;     CFGSTAT: subsys status
;
;       Sent asynchronously to indicate various events or status during system
;       configuration.
;
;       SUBSYS is the ID of the subsystem sending the response.
;
;       STATUS indicates a particular status or event related to the subsystem.
;       STATUS values with the high bit 0 (0 to 127) indicate normal conditions
;       and events, and do not indicate any failure or error.  STATUS values
;       with the high bit set (128 to 255) indicate some kind of failure during
;       initialization.
;
;       Subsystems are not required to send a STAT response when a failure is
;       detected, although that is usually helpful.  Failures are flagged
;       internally, and the system does not enter normal operation if any
;       failure was flagged during configuration.
;
;       Values of STATUS for the main system (ID 0) are:
;
;         0  -  System startup completed, beginning normal operation.
;
;         1  -  Startup completed, in test mode.
;
;         7  -  Startup not completed yet.  This is only sent in response to a
;           CFGSTAT command while configuration is still in progress.
;
;         255  -  Failure, not entering normal operating mode.
;
;       The first 8 (0 - 7) and the last 8 (248 - 255) main system status codes
;       are reserved to indicate the final status of the system after
;       configuration has completed.  The remaining codes (8 - 247) are specific
;       to individual implementations.  After the asynchronous STAT response for
;       SUBSYS 0 with one of the reserved codes is sent, no more STAT responses
;       will be asynchronously sent.
;
;       The CFGSTAT command causes the status for the main system (SUBSYS 0) to
;       be sent.
;
;     CFGING: subsys
;
;       Indicates that the subsystem is configuring itself.  This response is
;       emitted when CONFIG_SETUP is called.
;
;
;   Pre-processor configuration parameters:
;
;     CONFIG_START, integer
;
;       The non-volatile memory address of where the configuration data starts.
;       The default is 0.
;
;     CONFIG_INDIRECT, integer
;
;       The size of the indirect address at CONFIG_START, in bytes.  This is the
;       address of the actual start of the config data.  The indirect address
;       size can be 1-4 bytes.  The special value of 0 means that the config
;       starts directly at CONFIG_START.  The default is 0 (no indirect
;       address).
;
;     CONFIG_IND_HILO, bool
;
;       Byte order of the indirect address at CONFIG_START is from most to least
;       significant (big endian) when TRUE, and least to most significant
;       (little endian) when FALSE.  This value is irrelevant when there is no
;       indirect address (CONFIG_INDIRECT = 0).  The default is TRUE.
;
;     Macro CONFIG_MDEVS_NOTSYS
;
;       The code in this macro is run after the SYS module is initialized, and
;       iff the system is configured for normal operation.  The default version
;       below includes the xxx_CONFIG_MDEVS.INS.DSPIC file, which is code that
;       calls the configuration routines of all the MDEVs, in dependency order.
;
;       When configuration is complete, the macro falls thru to the local label
;       "cmdevs_done".  The code there sets the global CFGDONE flag, and emits
;       the CFGSTAT response for SYS (subsystem 0).
;
/include "qq2.ins.dspic"

;*******************************************************************************
;
;   Configuration constants.
;
/const   config_indirect integer = 0 ;size of initial indirect adr, bytes
/const   config_ind_hilo bool = true ;indirect adr stored high-low byte order

/macro config_mdevs_notsys   ;define macro for calling all the CFG routines except SYS
  /if [exist "qq2_config_mdevs.ins.dspic" fnam] then
    /include "qq2_config_mdevs.ins.dspic"
    /endif
  /endmac

/include "(cog)src/dspic/config.ins.dspic"
.end
